<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Java堆和栈的学习]]></title>
      <url>tbwang.win/%E5%A0%86%E5%92%8C%E6%A0%88%E5%AD%A6%E4%B9%A0.html</url>
      <content type="html"><![CDATA[<blockquote>
<h4 id="Java中堆与栈的区别"><a href="#Java中堆与栈的区别" class="headerlink" title="Java中堆与栈的区别"></a>Java中堆与栈的区别</h4></blockquote>
<p>下文来自网络：</p>
<p><strong>简单的说： Java把内存划分成两种：一种是栈内存，一种是堆内存。</strong><br>在函数中定义的<strong><em>一些基本类型的变量和对象的引用变量</em></strong>都在函数的栈内存中分配。 当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。<br>堆内存用来<strong>存放由new创建的对象和数组</strong>。在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。</p>
<a id="more"></a>
<ul>
<li>栈(stack)与堆(heap)都是Java用来在Ram中存放数据的地方。与C++不同，<strong>Java自动管理栈和堆，程序员不能直接地设置栈或堆</strong>。</li>
<li>栈的<strong>优势是</strong>，<strong>存取速度比堆要快</strong>，仅次于直接位于CPU中的寄存器。但<strong>缺点是</strong>，<strong>存在栈中的数据大小与生存期必须是确定的，缺乏灵活性</strong>。另外，<strong>栈数据可以共享</strong>，详见第3点。</li>
<li>堆的<strong>优势是</strong>可以<strong>动态地分配内存大小</strong>，生存期也不必事先告诉编译器，Java的垃圾收集器会自动收走这些不再使用的数据。但<strong>缺点是</strong>，由于要在<strong>运行时动态分配内存，存取速度较慢</strong>。</li>
<li>Java中的数据类型有两种。 一种是基本类型(primitive types), 共有8种，即int, short, long, byte, float, double, boolean, char(注意，并没有string的基本类型)。这种类型的定义是通过诸如int a = 3; long b = 255L;的形式来定义的，称为自动变量。值得注意的是，<strong>自动变量存的是字面值，不是类的实例，即不是类的引用，这里并没有类的存在</strong>。如<code>int a = 3;</code> 这里的a是一个指向int类型的引用，指向3这个字面值。这些字面值的数据，由于大小可知，生存期可知(这些字面值固定定义在某个程序块里面，程序块退出后，字段值就消失了)，出于追求速度的原因，就存在于栈中。</li>
</ul>
<blockquote>
<h4 id="栈的共享性"><a href="#栈的共享性" class="headerlink" title="栈的共享性"></a>栈的共享性</h4><p>栈有一个很重要的特殊性，就是存在栈中的数据可以共享。假设我们同时定义</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">3</span>; </div><div class="line"><span class="keyword">int</span> b = <span class="number">3</span>；</div></pre></td></tr></table></figure>
<p>编译器先处理<code>int a = 3；</code>首先它会在栈中创建一个变量为a的引用，然后查找有没有字面值为3的地址，没找到，就开辟一个存放3这个字面值的地址，然后将a指向3的地址。接着处理<code>int b = 3；</code>在创建完b的引用变量后，由于在栈中已经有3这个字面值，便将b直接指向3的地址。这样，就出现了a与b同时均指向3的情况。<br>特别注意的是，这种字面值的引用与类对象的引用不同。假定两个类对象的引用同时指向一个对象，如果一个对象引用变量修改了这个对象的内部状态，那么另一个对象引用变量也即刻反映出这个变化。相反，通过字面值的引用来修改其值，不会导致另一个指向此字面值的引用的值也跟着改变的情况。如上例，我们定义完a与 b的值后，再令a=4；那么，b不会等于4，还是等于3。在编译器内部，遇到a=4；时，它就会重新搜索栈中是否有4的字面值，如果没有，重新开辟地址存放4的值；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。<br>另一种是包装类数据，如<code>Integer, String, Double</code>等将相应的基本数据类型包装起来的类。这些类数据全部存在于堆中，Java用new()语句来显式地告诉编译器，<code>在运行时才根据需要动态创建，因此比较灵活，但缺点是要占用更多的时间</code>。</p>
<blockquote>
<h4 id="String包装类"><a href="#String包装类" class="headerlink" title="String包装类"></a>String包装类</h4></blockquote>
<p>String是一个特殊的包装类数据。即可以用<code>String str = new String(&quot;abc&quot;);</code>的形式来创建，也可以用<code>String str = &quot;abc&quot;；</code>的形式来创建(作为对比，在JDK 5.0之前，你从未见过<code>Integer i = 3;</code>的表达式，因为类与字面值是不能通用的，除了String。而在JDK 5.0中，这种表达式是可以的！因为编译器在后台进行<code>Integer i =  Integer.valueOf(3);</code> 的转换)。前者是规范的类的创建过程，即在Java中，一切都是对象，而对象是类的实例，全部通过new()的形式来创建。Java 中的有些类，如DateFormat类，可以通过该类的<code>getInstance()</code>方法来返回一个新创建的类，似乎违反了此原则。其实不然。该类运用了单例模式来返回类的实例，只不过这个实例是在该类内部通过new()来创建的，而<code>getInstance()</code>向外部隐藏了此细节。那为什么<code>在String str = &quot;abc&quot;；</code>中，并没有通过new()来创建实例，<br>是不是违反了上述原则？其实没有。<br>关于<code>String str = &quot;abc&quot;；</code>的内部工作。Java内部将此语句转化为以下几个步骤：</p>
<ol>
<li>先定义一个名为str的对String类的对象引用变量：<code>String str；</code></li>
<li>在栈中查找有没有存放值为”abc”的地址，如果没有，则开辟一个存放字面值为”abc”的地址，接着创建一个新的String类的对象o，并将o 的字符串值指向这个地址，而且在栈中这个地址旁边记下这个引用的对象o。如果已经有了值为”abc”的地址，则查找对象o，并返回o的地址。</li>
<li>将str指向对象o的地址。 值得注意的是，一般String类中字符串值都是直接存值的。但像<code>String str = &quot;abc&quot;；</code>这种场合下，其字符串值却是保存了一个指向存在栈中数据的引用！ </li>
</ol>
<p>为了更好地说明这个问题，我们可以通过以下的几个代码进行验证。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">String str1 = <span class="string">"abc"</span>; </div><div class="line">String str2 = <span class="string">"abc"</span>;</div><div class="line">system.out.println(str1==str2);</div><div class="line">```  </div><div class="line"> 注意，我们这里并不用**str1.equals(str2)；**的方式，因为这将比较两个字符串的值是否相等。`==号`，根据JDK的说明，只有在两个引用都指向了同一个对象时才返回真值。而我们在这里要看的是，str1与str2是否都指向了同一个对象。 结果说明，JVM创建了两个引用str1和str2，但只创建了一个对象，而且两个引用都指向了这个对象。 我们再来更进一步，将以上代码改成：</div><div class="line"></div><div class="line">``` java</div><div class="line">String str1 = <span class="string">"abc"</span>;</div><div class="line">String str2 = <span class="string">"abc"</span>;</div><div class="line">str1 = <span class="string">"bcd"</span>;</div><div class="line">System.out.println(str1 + <span class="string">","</span> + str2); <span class="comment">//bcd, abc</span></div><div class="line">System.out.println(str1==str2); <span class="comment">//false</span></div></pre></td></tr></table></figure>
<p>这就是说，赋值的变化导致了类对象引用的变化，str1指向了另外一个新对象！而str2仍旧指向原来的对象。上例中，当我们将str1的值改为”bcd”时，JVM发现在栈中没有存<br>放该值的地址，便开辟了这个地址，并创建了一个新的对象，其字符串的值指向这个地址。<br>事实上，String类被设计成为不可改变(immutable)的类。如果你要改变其值，可以，但JVM在运行时根据新值悄悄创建了一个新对象，然后将这个对象的地址返回给原来类的引用。这个创建过程虽说是完全自动进行的，但它毕竟占用了更多的时间。在对时间要求比较敏感的环境中，会带有一定的不良影响。 再修改原来代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String str1 = <span class="string">"abc"</span>;</div><div class="line">String str2 = <span class="string">"abc"</span>;</div><div class="line">str1 = <span class="string">"bcd"</span>;</div><div class="line">String str3 = str1;</div><div class="line">system.out.println(str3); <span class="comment">//bcd</span></div><div class="line">String str4 = <span class="string">"bcd"</span>;</div><div class="line">system.out.println(str1 == str4); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>str3 这个对象的引用直接指向str1所指向的对象(注意，str3并没有创建新对象)。当str1改完其值后，再创建一个String的引用str4，并指向因str1修改值而创建的新的对象。可以发现，这回str4也没有创建新的对象，从而再次实现栈中数据的共享。 我们再接着看以下的代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div><div class="line">String str2 = <span class="string">"abc"</span>;</div><div class="line">system.out.println(str1==str2); <span class="comment">//false</span></div></pre></td></tr></table></figure>
<p>创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。以上两段代码说明，只要是用new()来新建对象的，都会在堆中创建，而且其字符串是单独存值的，即使与栈中的数据相同，也不会与栈中的数据共享。<br><strong>数据类型包装类的值不可修改。不仅仅是String类的值不可修改，所有的数据类型包装类都不能更改其内部的值。</strong></p>
<p><strong>结论与建议：</strong><br>(1)我们在使用诸如<code>String str = &quot;abc&quot;；</code>的格式定义类时，总是想当然地认为，我们创建了String类的对象str。担心陷阱！对象可能并没有被创建！唯一可以肯定的是，指向 String类的引用被创建了。至于这个引用到底是否指向了一个新的对象，必须根据上下文来考虑，除非你通过new()方法来显要地创建一个新的对象。因此，更为准确的说法是，我们创建了一个指向String类的对象的引用变量str，这个对象引用变量指向了某个值为”abc”的String类。清醒地认识到这一点对排除程序中难以发现的bug是很有帮助的。<br>(2)使用<code>String str = &quot;abc&quot;；</code>的方式，可以在一定程度上提高程序的运行速度，因为JVM会自动根据栈中数据的实际情况来决定是否有必要创建新对象。而对于String str = new String(“abc”)；的代码，则一概在堆中创建新对象，而不管其字符串值是否相等，是否有必要创建新对象，从而加重了程序的负担。这个思想应该是享元模式的思想，但JDK的内部在这里实现是否应用了这个模式，不得而知。<br>(3)当比较包装类里面的数值是否相等时，用equals()方法；当测试两个包装类的引用是否指向同一个对象时，用==。<br>(4)由于String类的immutable性质，<strong>当String变量需要经常变换其值时，应该考虑使用StringBuffer类，以提高程序效率</strong>。</p>
<blockquote>
<h4 id="java中内存分配策略及堆和栈的比较"><a href="#java中内存分配策略及堆和栈的比较" class="headerlink" title="java中内存分配策略及堆和栈的比较"></a>java中内存分配策略及堆和栈的比较</h4></blockquote>
<p><strong>内存分配策略</strong><br>按照编译原理的观点,程序运行时的内存分配有三种策略,分别是<strong>静态的,栈式的,和堆式的</strong>.<br><strong>静态存储分配</strong>是指在编译时就能确定每个数据目标在运行时刻的存储空间需求,因而在<br>编译时就可以给他们分配固定的内存空间.这种分配策略要求程序代码中不允许有可变数据结构(比如可变数组)的存在,也不允许有嵌套或者递归的结构出现,因为它们都会导致编译程序无法计算准确的存储空间需求.<br><strong>栈式存储分配</strong>也可称为动态存储分配,是由一个类似于堆栈的运行栈来实现的.和静态存储分配相反,在栈式存储方案中,程序对数据区的需求在编译时是完全未知的,只有到运行的时候才能够知道,但是规定在运行中进入一个程序模块时,必须知道该程序模块所需的数据区大小才能够为其分配内存.和我们在数据结构所熟知的栈一样,栈式存储分配按照先进后出的原则进行分配。<br>静态存储分配要求在编译时能知道所有变量的存储要求,栈式存储分配要求在过程的入口处必须知道所有的存储要求<br><strong>堆式存储分配</strong>则专门负责在编译时或运行时模块入口处都无法确定存储要求的数据结构的内存分配,比如可变长度串和对象实例.堆由大片的可利用块或空闲块组成,堆中的内存可以按照任意顺序分配和释放.<br>堆和栈的比较<br>上面的定义从编译原理的教材中总结而来,除静态存储分配之外,都显得很呆板和难以理解,下面撇开静态存储分配,集中比较堆和栈:</p>
<hr>
<p>从堆和栈的功能和作用来通俗的比较,<strong>堆主要用来存放对象的，栈主要是用来执行程序的.</strong>而这种不同又主要是由于堆和栈的特点决定的:<br>在编程中，例如C/C++中，所有的方法调用都是通过栈来进行的,所有的局部变量,形式参数都是从栈中分配内存空间的。实际上也不是什么分配,只是从栈顶向上用就行,就好像工厂中的传送带(conveyor belt)一样,Stack Pointer会自动指引你到放东西的位置,你所要做的只是把东西放下来就行.退出函数的时候，修改栈指针就可以把栈中的内容销毁.这样的模式速度最快,当然要用来运行程序了.需要注意的是,在分配的时候,比如为一个即将要调用的程序模块分配数据区时,应事先知道这个数据区的大小,也就说是虽然分配是在程序运行时进行的,但是分配的大小多少是确定的,不变的,而这个”大小多少”是在编译时确定的,不是在运行时.<br><strong>堆是应用程序在运行的时候请求操作系统分配给自己内存</strong>，由于从操作系统管理的内存分配,所以在分配和销毁时都要占用时间，因此用堆的效率非常低.但是堆的优点在于,编译器不必知道要从堆里分配多少存储空间，也不必知道存储的数据要在堆里停留多长的时间,因此,用堆保存数据时会得到更大的灵活性。事实上,面向对象的多态性,堆内存分配是必不可少的,因为多态变量所需的存储空间只有在运行时创建了对象之后才能确定.在C++中，要求创建一个对象时，只需用 new命令编制相关的代码即可。执行这些代码时，会在堆里自动进行数据的保存.当然，为达到这种灵活性，必然会付出一定的代价:在堆里分配存储空间时会花掉更长的时间！这也正是导致我们刚才所说的效率低的原因,看来列宁同志说的好,人的优点往往也是人的缺点,人的缺点往往也是人的优点(晕~).</p>
<blockquote>
<h4 id="JVM中的堆和栈"><a href="#JVM中的堆和栈" class="headerlink" title="JVM中的堆和栈"></a>JVM中的堆和栈</h4></blockquote>
<p>JVM是基于堆栈的虚拟机.JVM为每个新创建的线程都分配一个堆栈.也就是说,对于一个Java程序来说，它的运行就是通过对堆栈的操作来完成的。堆栈以帧为单位保存线程的状态。JVM对堆栈只进行两种操作:以帧为单位的压栈和出栈操作。 我们知道,某个线程正在执行的方法称为此线程的当前方法.我们可能不知道,当前方法使用的帧称为当前帧。当线程激活一个Java方法,JVM就会在线程的 Java堆栈里新压入一个帧。这个帧自然成为了当前帧.在此方法执行期间,这个帧将用来保存参数,局部变量,中间计算过程和其他数据.这个帧在这里和编译原理中的活动纪录的概念是差不多的. 从Java的这种分配机制来看,堆栈又可以这样理解:堆栈(Stack)是操作系统在建立某个进程时或者线程(在支持多线程的操作系统中是线程)为这个线程建立的存储区域，该区域具有先进后出的特性。 每一个Java应用都唯一对应一个JVM实例，每一个实例唯一对应一个堆。应用程序在运行中所创建的所有类实例或数组都放在这个堆中,并由应用所有的线程 共享.跟C/C++不同，Java中分配堆内存是自动初始化的。Java中所有对象的存储空间都是在堆中分配的，但是这个对象的引用却是在堆栈中分配,也就是说在建立一个对象时从两个地方都分配内存，在堆中分配的内存实际建立这个对象，而在堆栈中分配的内存只是一个指向这个堆对象的指针(引用)而已。<br>GC的思考<br>Java为什么慢?JVM的存在当然是一个原因,但有人说,在Java中,除了简单类型(int,char等)的数据结构,其它都是在堆中分配内存(所以说Java的一切都是对象)，这也<br>是程序慢的原因之一。<br>我的想法是(应该说代表TIJ的观点),如果没有Garbage Collector(GC),上面的说法就是成立的.堆不象栈是连续的空间,没有办法指望堆本身的内存分配能够象堆栈一样拥有传送带般的速度,因为,谁会 为你整理庞大的堆空间,让你几乎没有延迟的从堆中获取新的空间呢?<br>这个时候,GC站出来解决问题.我们都知道GC用来清除内存垃圾,为堆腾出空间供程序使用,但GC同时也担负了另外一个重要的任务,就是要让Java中堆的内存分配和其他语言中堆栈的内存分配一样快,因为速度的问题几乎是众口一词的对Java的诟病.要达到这样的目的,就必须使堆的分配也能够做到象传送带一样,不用自己操心去找空闲空间.这样,GC除了负责清除Garbage外,还要负责整理堆中的对象,把它们转移到一个远离Garbage的纯净空间中无间隔的排列起来,就象堆栈中一样紧凑,这样Heap Pointer就可以方便的指向传送带的起始位置,或者说一个未使用的空间,为下一个需要分配内存的对象”指引方向”.因此可以这样说,垃圾收集影响了对象的创建速度,听起来很怪,对不对?<br> 那GC怎样在堆中找到所有存活的对象呢?前面说了,在建立一个对象时，在堆中分配实际建立这个对象的内存,而在堆栈中分配一个指向这个堆对象的指针(引 用),那么只要在堆栈(也有可能在静态存储区)找到这个引用,就可以跟踪到所有存活的对象.找到之后,GC将它们从一个堆的块中移到另外一个堆的块中,并 将它们一个挨一个的排列起来,就象我们上面说的那样,模拟出了一个栈的结构,但又不是先进后出的分配,而是可以任意分配的,在速度可以保证的情况下, Isn’t it great?<br> 但是，列宁同志说了,人的优点往往也是人的缺点,人的缺点往往也是人的优点(再晕~~).GC()的运行要占用一个线程,这本身就是一个降低程序运行性能 的缺陷,更何况这个线程还要在堆中把内存翻来覆去的折腾.不仅如此,如上面所说,堆中存活的对象被搬移了位置,那么所有对这些对象的引用都要重新赋值.这 些开销都会导致性能的降低.<br>基础数据类型直接在栈空间分配，方法的形式参数，直接在栈空间分配，当方法调用完成后从栈空间回收。引用数据类型，需要用new来创建，既在栈空间 分配一个地址空间，又在堆空间分配对象的类变量 。方法的引用参数，<strong>在栈空间分配一个地址空间，并指向堆空间的对象区，当方法调用完成后从栈空间回收。局部变量new出来时，在栈空间和堆空间中分配空 间，当局部变量生命周期结束后，栈空间立刻被回收，堆空间区域等待GC回收</strong>。方法调用时传入的literal参数，先在栈空间分配，在方法调用完成后从栈 空间分配。字<br>符串常量在DATA区域分配，this在堆空间分配。数组既在栈空间分配数组名称，又在堆空间分配数组实际的大小！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jar包 VS War包]]></title>
      <url>tbwang.win/Jar%E5%92%8CWar%E4%BB%8B%E7%BB%8D.html</url>
      <content type="html"><![CDATA[<blockquote>
<h4 id="什么是Jar包"><a href="#什么是Jar包" class="headerlink" title="什么是Jar包"></a>什么是Jar包</h4></blockquote>
<p>Jar文件（扩展名为. Jar，Java Application Archive）包含Java类的普通库、资源（resources）、辅助文件（auxiliary files）等。</p>
<a id="more"></a>
<p>通常是开发时要引用的通用类，打成包便于存放管理。简单来说，jar包就是别人已经写好的一些类，然后对这些类进行打包。可以将这些jar包引入到你的项目中，可以直接使用这些jar包中的类和属性，这些jar包一般放在lib目录下。</p>
<blockquote>
<h4 id="什么是War包"><a href="#什么是War包" class="headerlink" title="什么是War包"></a>什么是War包</h4></blockquote>
<p>War文件（扩展名为.War,Web Application Archive）包含全部Web应用程序。在这种情形下，一个Web应用程序被定义为单独的一组文件、类和资源，用户可以对jar文件进行封装，并把它作为小型服务程序（servlet）来访问。</p>
<p>它是一个可以直接运行的web模块，通常用于网站，打成包部署到容器中。以Tomcat来说，将war包放置在其\webapps\目录下,然后启动Tomcat，这个包就会自动解压，就相当于发布了。<br>war包是Sun提出的一种web应用程序格式，与jar类似，是很多文件的压缩包。<br>war包中的文件按照一定目录结构来组织。根据其根目录下包含有html和jsp文件，或者包含有这两种文件的目录，另外还有WEB-INF目录。通常在WEB-INF目录下含有一个web.xml文件和一个classes目录，web.xml是这个应用的配置文件，而classes目录下则包含编译好的servlet类和jsp，或者servlet所依赖的其他类（如JavaBean）。通常这些所依赖的类也可以打包成jar包放在WEB-INF下的lib目录下。</p>
<blockquote>
<h4 id="如何打包jar、war包"><a href="#如何打包jar、war包" class="headerlink" title="如何打包jar、war包"></a>如何打包jar、war包</h4></blockquote>
<p>我使用的是Idea工具，如果项目是使用Maven配置部署的，那么打包文件很简单</p>
<p>执行一下package命令即可打包对应的jar、war文件了</p>
<p><img src="http://oixqnvv3q.bkt.clouddn.com/14876591397481.jpg" alt=""></p>
<p>eclipse工具需要到控制台执行一下 maven package命令。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maven学习]]></title>
      <url>tbwang.win/Maven.html</url>
      <content type="html"><![CDATA[<p>年后终于上班啦，算算已经快有一个月没有更新个人博客了，当初要写博客本身的目的就是为了在记录学习中所遇到的问题、学到的知识的同时，也督促自己养成一种坚持记录的习惯，以后每个月还要继续坚持下去</p>
<blockquote>
<h3 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h3></blockquote>
<p><strong>Maven</strong>是一个项目管理工具，它包含一个<code>目标对象模型</code>POM（project Object Model），一个<code>项目生命周期</code>（Project Lifecycle），一个<code>依赖管理系统</code>（Dependency Management System）和用来运行定义在生命周期阶段中插件目标的逻辑。</p>
<a id="more"></a>
<blockquote>
<h3 id="Maven的目录结构"><a href="#Maven的目录结构" class="headerlink" title="Maven的目录结构"></a>Maven的目录结构</h3></blockquote>
<p>Maven采用了约定优于配置这种概念，系统、类库、框架给定了一个合理的默认值，maven通过给项目提供默认行为来融合这种概念。如果我们没有采用自定义的情况下，maven的默认目录结构为</p>
<ul>
<li>源代码放在：<code>workspace/src/main/java</code></li>
<li>资源文件放在：<code>workspace/src/main/resources</code></li>
<li>测试代码放在：<code>workspace/src/test</code></li>
<li>字节码文件放在：<code>workspace/target/classes</code></li>
<li>可发行的jar包放在：<code>workspace/target</code></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/3949443-3031f6706bd4dc22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<blockquote>
<h3 id="Maven和Ant的区别"><a href="#Maven和Ant的区别" class="headerlink" title="Maven和Ant的区别"></a>Maven和Ant的区别</h3></blockquote>
<h4 id="Apache-Ant"><a href="#Apache-Ant" class="headerlink" title="Apache Ant"></a>Apache Ant</h4><ul>
<li>Ant 没有正式的约定一个项目的目录结构，你必须明确的告诉Ant哪里放源码，哪里放字节码等。</li>
<li>Ant 是程序化的，你必须告诉 Ant 做什么，什么时候做。</li>
<li>Ant 没有生命周期，你必须定义目标和目标之间的依赖。</li>
</ul>
<h4 id="Apache-Maven"><a href="#Apache-Maven" class="headerlink" title="Apache Maven"></a>Apache Maven</h4><ul>
<li>Maven 拥有约定，遵守了约定， Maven 就知道你的源代码放在了哪里。</li>
<li>Maven 是声明式的。你只需要创建一个 pom.xml 文件并将其放在默认的目录下， Maven 就会帮你干其他的事了。</li>
<li>Maven 拥有生命周期，当你运行相应的命令后就会被调用，这条命令会告诉 Maven 执行一系列的有序步骤， 直到达到指定的生命周期。</li>
</ul>
<blockquote>
<h3 id="Maven安装和创建"><a href="#Maven安装和创建" class="headerlink" title="Maven安装和创建"></a>Maven安装和创建</h3></blockquote>
<p>我在Mac系统下使用的Idea工具默认带有Maven无需安装，关于eclipse工具安装Maven、Windows平台下安装Maven这里就不一一讲述了，网上有很多教程可以参考<br>使用Idea工具创建Maven工程非常简单，接下来我们主要针对Maven的一些重要概念进行讲解</p>
<blockquote>
<h3 id="Maven的生命周期（Lifecycle）"><a href="#Maven的生命周期（Lifecycle）" class="headerlink" title="Maven的生命周期（Lifecycle）"></a>Maven的生命周期（Lifecycle）</h3></blockquote>
<p><strong>Maven</strong>强大的一个重要的原因是它有一个十分完善的生命周期模型(lifecycle)，这个生命周期可以从两方面来理解，</p>
<ul>
<li>第一，顾名思义，运行Maven的每个步骤都由它来定义的，这种预定义的默认行为使得我们使用Maven变得简单，相比而言，Ant的每个步骤都要你手工去定义。</li>
<li>第二，这个模型是一种标准，在不同的项目中，使用Maven的接口是一样的，这样就不用去仔细理解每个项目的构建了，一般情况下，<code>mvn clean install</code> 这样的命令是通用的。我想，一定是吸收了许多项目的经验，Maven才能定义出如此完善的模型。</li>
</ul>
<p>Maven有三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，初学者容易将Maven的生命周期看成一个整体，其实不然。这三套生命周期分别是：</p>
<ul>
<li><code>Clean Lifecycle</code> <em>在进行真正的构建之前进行一些清理工作</em></li>
<li><code>Default Lifecycle</code> <em>构建的核心部分，编译，测试，打包，部署等等</em></li>
<li><code>Site Lifecycle</code> <em> 生成项目报告，站点，发布站点</em></li>
</ul>
<p>我再次强调一下它们是相互独立的，你可以仅仅调用clean来清理工作目录，仅仅调用site来生成站点。当然你也可以直接运行 <code>mvn clean install site</code> 运行所有这三套生命周期。</p>
<p>知道了每套生命周期的大概用途和相互关系以后，来逐个详细看一下每套生命周期，Clean和Site相对比较简单，先解释一下。</p>
<blockquote>
<h4 id="Clean生命周期"><a href="#Clean生命周期" class="headerlink" title="Clean生命周期"></a>Clean生命周期</h4></blockquote>
<p>每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行<code>mvn clean</code> ，这个的clean是Clean生命周期的一个阶段。有点绕？要知道有Clean生命周期，也有clean阶段。Clean生命周期一共包含了三个阶段：</p>
<ul>
<li><code>pre-clean</code>  执行一些需要在clean之前完成的工作</li>
<li><code>clean</code>  移除所有上一次构建生成的文件</li>
<li><code>post-clean</code>  执行一些需要在clean之后立刻完成的工作</li>
</ul>
<p><code>mvn clean</code> 中的<code>clean</code>就是上面的<code>clean</code>，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，<code>mvn clean</code> 等同于 <code>mvn pre-clean clean</code>，如果我们运行 <code>mvn post-clean</code> ，那么 <code>pre-clean，clean</code>都会被运行。这是Maven很重要的一个规则，可以大大简化命令行的输入。</p>
<blockquote>
<h4 id="Site生命周期"><a href="#Site生命周期" class="headerlink" title="Site生命周期"></a>Site生命周期</h4></blockquote>
<p>下面看一下Site生命周期的各个阶段：</p>
<ul>
<li><code>pre-site</code>     执行一些需要在生成站点文档之前完成的工作</li>
<li><code>site</code>    生成项目的站点文档</li>
<li><code>post-site</code>    执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li>
<li><code>site-deploy</code>     将生成的站点文档部署到特定的服务器上</li>
</ul>
<p>这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这可是Maven相当强大的功能，Manager比较喜欢，文档及统计数据自动生成，很好看。</p>
<blockquote>
<h4 id="Default生命周期"><a href="#Default生命周期" class="headerlink" title="Default生命周期"></a>Default生命周期</h4></blockquote>
<p>最后，来看一下Maven的最重要的Default生命周期，绝大部分工作都发生在这个生命周期中，这里，我只解释一些比较重要和常用的阶段：</p>
<ul>
<li><code>validate</code></li>
<li><code>generate-sources</code></li>
<li><code>process-sources</code></li>
<li><code>generate-resources</code></li>
<li><code>process-resources</code>     复制并处理资源文件，至目标目录，准备打包。</li>
<li><code>compile</code>    编译项目的源代码。</li>
<li><code>process-classes</code></li>
<li><code>generate-test-sources</code></li>
<li><code>process-test-sources</code></li>
<li><code>generate-test-resources</code></li>
<li><code>process-test-resources</code>     复制并处理资源文件，至目标测试目录。</li>
<li><code>test-compile</code>    编译测试源代码。</li>
<li><code>process-test-classes</code></li>
<li><code>test</code>     使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。</li>
<li><code>prepare-package</code></li>
<li><code>package</code>     接受编译好的代码，打包成可发布的格式，如 JAR 。</li>
<li><code>pre-integration-test</code></li>
<li><code>integration-test</code></li>
<li><code>post-integration-test</code></li>
<li><code>verify</code></li>
<li><code>install</code>     将包安装至本地仓库，以让其它项目依赖。</li>
<li><code>deploy</code>   将最终的包复制到远程的仓库，以让其它开发人员与项目共享。</li>
</ul>
<p>基本上，根据名称我们就能猜出每个阶段的用途，关于其它阶段的解释，请参考<a href="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html" target="_blank" rel="external">文档</a></p>
<p><strong>记住，运行任何一个阶段的时候，它前面的所有阶段都会被运行，这也就是为什么我们运行</strong>mvn install<strong> 的时候，代码会被编译，测试，打包。</strong></p>
<p>此外，Maven的插件机制是完全依赖Maven的生命周期的，因此理解生命周期至关重要。</p>
<blockquote>
<h3 id="Maven-坐标（Coordinates）"><a href="#Maven-坐标（Coordinates）" class="headerlink" title="Maven 坐标（Coordinates）"></a>Maven 坐标（Coordinates）</h3></blockquote>
<p>Maven坐标定义了一组标识，它可以用来唯一标识一个项目，一个依赖，或者是一个POM里面的插件。我们先来看一个简单的POM。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3949443-d87c71549ee2f9b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>其中 <code>groupId、artfiactId、version和packaging</code>共同组成了项目的坐标，Maven通过一个坐标来定位一个项目，Maven 坐标一般会用冒号作为分隔符来书写。<br><code>groupId:artifactId:packaging:version</code><br>在上图的项目坐标就可以表示为：<code>com.test:ordcore:jar:1.0.0</code></p>
<ul>
<li><code>groupId</code>：表示一个团体标识，它一般以创建这个项目的组织名称的逆向域名（version domain name）开头。比如 Apache Software 就以·org.apache·作为 groupId。</li>
<li><code>artifactId</code>：在 groupId 下的表示一个单独项目的唯一标识，一般为项目名。</li>
<li><code>version</code>：一个项目的特定版本。如果是正在开发中的项目那么一般会加上一个特殊的标识，在版本号前加上 “SNAPSHOT”的标记。</li>
<li><code>package</code>：项目的类型，默认为jar，描述了项目打包后的输出格式。也可以打包成一个 war。</li>
</ul>
<blockquote>
<h3 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h3></blockquote>
<p>没有 Maven 时，项目用到的<code>.jar</code> 文件通常需要拷贝到<code>/lib</code> 目录，项目多了，拷贝的文件副本就多了，占用磁盘空间，且难于管理。Maven 使用一个称之为仓库的目录，根据构件的坐标统一存储这些构件的唯一副本，在项目中通过依赖声明，可以方便的引用构件。</p>
<blockquote>
<h4 id="仓库的地址"><a href="#仓库的地址" class="headerlink" title="仓库的地址"></a>仓库的地址</h4></blockquote>
<p>当我们在运行 Maven 项目的时候，Maven 会从 pom.xml 中查找已配置的插件坐标，然后在本地仓库中查找是否有对应的插件，如果没有那么就会从 Maven 自带的<a href="https://repo.maven.org/maven2" target="_blank" rel="external">远程仓库</a>中下载所需要的插件缓存到本地仓库。本地仓库的默认地址：</p>
<ul>
<li>window中：<code>C:\Users\USERNAME.m2\repository</code></li>
<li>linux/Mac中：<code>~/.m2/repository</code></li>
</ul>
<p>如果我们有需要的话也是可以修改本地仓库的地址,更改配置<strong>用户范围</strong>的本地仓库：<br>在<code>/.m2/</code> 目录下创建一个<code>setting.xml</code>或者将<code>M2_HOME/conf/settings.xml</code>拷过来<br>在 <code>setting.xml</code>中添加以下节点。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>新的仓库地址<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>更改配置全局范围的本地仓库<br>直接在<code>M2_HOME/conf/settings.xml</code>添加以下节点<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>新的仓库地址<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>当 Maven升级后，所有的配置都将会被清除，所以一般不推荐修改全局的配置</strong></p>
<blockquote>
<h4 id="仓库的文件存储布局"><a href="#仓库的文件存储布局" class="headerlink" title="仓库的文件存储布局"></a>仓库的文件存储布局</h4></blockquote>
<p>在我们打开本地仓库（repository） 后，我们会看到很多的插件，Maven 仓库会按以下目录格式来存储插件。</p>
<p><code>/ &lt;groupId &gt;/&lt; artifactId &gt;/&lt; version &gt;/&lt; artifactId &gt;-&lt;version&gt;.&lt; packaging &gt;</code><br>比如 fastjson-1.2.20.jar的存储方式<br><code>com/alibaba/fastjson/1.2.20/fastjson-1.2.20.jar</code></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3949443-14866e43c2bd6e7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>它在pom.xml引用的格式如下：<br><img src="http://upload-images.jianshu.io/upload_images/3949443-b56a056db92036f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Idea工具使用]]></title>
      <url>tbwang.win/Idea%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8.html</url>
      <content type="html"><![CDATA[<h3 id="Idea工具更改运行内存"><a href="#Idea工具更改运行内存" class="headerlink" title="Idea工具更改运行内存"></a>Idea工具更改运行内存</h3><blockquote>
<p>在使用Idea编辑工程时候老是提示我内存不足，根据网上搜索的方法，发现都是要求去改idea安装目录下的配置文件，但是无效。后来试了好多方式才最终找到解决方法。</p>
</blockquote>
<p>不需要更改安装目录下的配置文件，直接找到下面的位置，将<code>Build process heap size</code>的大小改成一个相对大的数值即可。这个数值以满足你的运行需求即可，不要太大。<br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/3949443-b9b897f16959c593.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Idea更改项目运行内存"></p>
<h3 id="Idea更改字体和保护色"><a href="#Idea更改字体和保护色" class="headerlink" title="Idea更改字体和保护色"></a>Idea更改字体和保护色</h3><blockquote>
<p>更改字体大小</p>
</blockquote>
<p>找到这个地方，将字体、大小改成你所需要的即可<br><img src="http://upload-images.jianshu.io/upload_images/3949443-f17232e55307a5fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="idea更改字体大小"></p>
<blockquote>
<p>更改背景色</p>
</blockquote>
<p>如果不想切换主题，只是单纯的推荐背景色，那么找到下列的位置，更改背景色即可。这里推荐使用绿豆沙色<br>绿豆沙色能有效的减轻长时间用电脑的用眼疲劳！<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">色调：85，饱和度：123，亮度：205；</div><div class="line">RGB颜色红：199，绿：237，蓝：204；</div><div class="line">十六进制颜色：#C7EDCC或用#CCE8CF</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3949443-b193b467684f4a77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Idea更改背景色"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java解析Json]]></title>
      <url>tbwang.win/Java%E8%A7%A3%E6%9E%90Json.html</url>
      <content type="html"><![CDATA[<p>JSON解析我们常用三种方式进行解析，谷歌的gson，阿里的fastJson，还有就是安卓原生自带的net.sf.json，这三者都可以实现json解析的功能，如果数据量较小，三者任选一种都可以，如果<br>是针对大数据量，那么推荐使用fastJson，不推荐使用net.sf.json。</p>
<blockquote>
<h3 id="使用gson解析"><a href="#使用gson解析" class="headerlink" title="使用gson解析"></a>使用gson解析</h3></blockquote>
<p>gson支持解析的类型还是比较全面的,包括JavaBean,List<javabean>,List<string>,Map等,使用起来也是比较方便.</string></javabean></p>
<p>首先配置环境,需要下载相应的jar包, 下面测试使用的版本是2.2.4.<a href="http://code.google.com/p/google-gson/" target="_blank" rel="external">官方下载地址</a>，<a href="http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/index.html" target="_blank" rel="external">gson API</a></p>
<a id="more"></a>
<p>测试用例(源码附件GsonJson.zip,下载地址:<a href="http://pan.baidu.com/s/1qWHNjdU" target="_blank" rel="external">http://pan.baidu.com/s/1qWHNjdU</a>):</p>
<p>复制代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGson</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Gson gson = <span class="keyword">new</span> Gson(); </div><div class="line">    </div><div class="line">    <span class="comment">//java bean to json string</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beanToJson</span><span class="params">()</span></span>&#123;</div><div class="line">        Person person  = <span class="keyword">new</span> Person();</div><div class="line">        person.setId(<span class="number">1</span>);</div><div class="line">        person.setName(<span class="string">"zhanglu"</span>);</div><div class="line">        person.setAddress(<span class="string">"湖北大悟"</span>);</div><div class="line">        System.out.println(gson.toJson(person));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//json string to java bean</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jsonTobean</span><span class="params">()</span></span>&#123;</div><div class="line">        String json = <span class="string">"&#123;'id':'1','name':'zhang','address':'Hubei'&#125;"</span>;</div><div class="line">        Person person = gson.fromJson(json, Person.class);</div><div class="line">        System.out.println(person);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//list&lt;bean&gt; to json</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listBeanToJson</span><span class="params">()</span></span>&#123;</div><div class="line">        Person person1 = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"zhang"</span>, <span class="string">"Hubei"</span>);</div><div class="line">        Person person2 = <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">"lu"</span>,<span class="string">"DaWu"</span>);</div><div class="line">        List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        persons.add(person1);</div><div class="line">        persons.add(person2);</div><div class="line">        String json = gson.toJson(persons);</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//json to list&lt;bean&gt;</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jsonToListBean</span><span class="params">()</span></span>&#123;</div><div class="line">        String json = <span class="string">"[&#123;'id':'1','name':'zhang','address':'Hubei'&#125;,&#123;'id':'2','name':'lu','address':'DaWu'&#125;]"</span>;</div><div class="line">        List&lt;Person&gt; persons = gson.fromJson(json, <span class="keyword">new</span> TypeToken&lt;List&lt;Person&gt;&gt;()&#123;&#125;.getType());</div><div class="line">        <span class="keyword">for</span>(Person per : persons)&#123;</div><div class="line">            System.out.println(per);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//list string to string</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listStringToJson</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        list.add(<span class="string">"zhanglu"</span>);</div><div class="line">        list.add(<span class="string">"hubei"</span>);</div><div class="line">        list.add(<span class="string">"Dawu"</span>);</div><div class="line">        String json = gson.toJson(list);</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//json string to list&lt;string&gt;</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jsonToListString</span><span class="params">()</span></span>&#123;</div><div class="line">        String json = <span class="string">"['zhanglu','hubei','Dawu']"</span>;</div><div class="line">        List&lt;String&gt; list = gson.fromJson(json, <span class="keyword">new</span> TypeToken&lt;List&lt;String&gt;&gt;()&#123;&#125;.getType());</div><div class="line">        <span class="keyword">for</span>(String str : list)&#123;</div><div class="line">            System.out.println(str);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//Map&lt;String,object&gt; to json</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mapToJson</span><span class="params">()</span></span>&#123;</div><div class="line">        Map&lt;String, Person&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        Person person = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"zhanglu"</span>, <span class="string">"湖北大悟"</span>);</div><div class="line">        Person person2 = <span class="keyword">new</span> Person(<span class="number">2</span>, <span class="string">"Alone"</span>, <span class="string">"HuBeiDaWu"</span>);</div><div class="line">        map.put(<span class="string">"person"</span>, person);</div><div class="line">        map.put(<span class="string">"person2"</span>, person2);</div><div class="line">        String json = gson.toJson(map);</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//json to Map&lt;Stirng,Object&gt;</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jsonToMap</span><span class="params">()</span></span>&#123;</div><div class="line">        String json = <span class="string">"&#123;'person':&#123;'id':1,'name':'zhanglu','address':'湖北大悟'&#125;,'person2':&#123;'id':2,'name':'Alone','address':'HuBeiDaWu'&#125;&#125;"</span>;</div><div class="line">        Map&lt;String, Person&gt; map = gson.fromJson(json, <span class="keyword">new</span> TypeToken&lt;Map&lt;String,Person&gt;&gt;()&#123;&#125;.getType());</div><div class="line">        <span class="keyword">for</span>(String str : map.keySet())&#123;</div><div class="line">            System.out.println(<span class="string">"key:"</span>+str);</div><div class="line">            System.out.println((Person)map.get(str));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//test refrences obj</span></div><div class="line">    <span class="comment">//如果双向引用, 会产生死循环,  方法1, 在需要被过滤的字段上加上修饰符transient, Cat的animail加上了</span></div><div class="line">    <span class="comment">//方法1：排除transient字段</span></div><div class="line">    <span class="comment">/*//方法2：排除Modifier为指定类型的字段Gson gson = new GsonBuilder().excludeFieldsWithModifiers(Modifier.PROTECTED) // &lt;---.create();*/</span></div><div class="line">    <span class="comment">//方法3：使用@Expose注解,注意，没有被 @Expose 标注的字段会被排除，如下所示：</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReferences</span><span class="params">()</span></span>&#123;</div><div class="line">        Animail animail = <span class="keyword">new</span> Animail();</div><div class="line">        animail.setName(<span class="string">"Animial"</span>);</div><div class="line">        Cat cat = <span class="keyword">new</span> Cat();</div><div class="line">        cat.setId(<span class="number">1</span>);</div><div class="line">        cat.setName(<span class="string">"Cat1"</span>);</div><div class="line">        cat.setAnimail(animail);</div><div class="line">        Cat cat2 = <span class="keyword">new</span> Cat();</div><div class="line">        cat2.setId(<span class="number">2</span>);</div><div class="line">        cat2.setName(<span class="string">"Cat2"</span>);</div><div class="line">        cat.setAnimail(animail);</div><div class="line">        List&lt;Cat&gt; cats  = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        cats.add(cat2);</div><div class="line">        cats.add(cat);</div><div class="line">        animail.setCatlist(cats);</div><div class="line">        String json = gson.toJson(animail);</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//方法4：使用ExclusionStrategy定制字段排除策略,这种方式最灵活，下面的例子把所有以下划线开头的字段全部都排除掉：</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExclusionStrategy</span><span class="params">()</span></span>&#123;</div><div class="line">        ClassInfo classInfo = <span class="keyword">new</span> ClassInfo();</div><div class="line">        classInfo.setClassNo(<span class="string">"C0001"</span>);</div><div class="line">        classInfo.setClassName(<span class="string">"Java_1"</span>);</div><div class="line">        StudentInfo stu1 = <span class="keyword">new</span> StudentInfo();</div><div class="line">        stu1.setStuId(<span class="number">1</span>);</div><div class="line">        stu1.setStuName(<span class="number">1</span>);</div><div class="line">        StudentInfo stu2 = <span class="keyword">new</span> StudentInfo();</div><div class="line">        stu2.setStuId(<span class="number">1</span>);</div><div class="line">        stu2.setStuName(<span class="number">1</span>);</div><div class="line">        stu1.setClassInfo(classInfo);</div><div class="line">        stu2.setClassInfo(classInfo);</div><div class="line">        List&lt;StudentInfo&gt; stulist = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        stulist.add(stu2);</div><div class="line">        stulist.add(stu1);</div><div class="line">        classInfo.setStudentslist(stulist);</div><div class="line">        ExclusionStrategy myExclusionStrategy = <span class="keyword">new</span> ExclusionStrategy() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldSkipField</span><span class="params">(FieldAttributes fa)</span> </span>&#123;</div><div class="line">                  <span class="keyword">return</span> fa.getName().equals(<span class="string">"classInfo"</span>);</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldSkipClass</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">              &#125;</div><div class="line">         &#125;;</div><div class="line">        Gson gson = <span class="keyword">new</span> GsonBuilder().setExclusionStrategies(myExclusionStrategy).create();</div><div class="line">        String json = gson.toJson(classInfo);</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<h3 id="使用fastJson解析"><a href="#使用fastJson解析" class="headerlink" title="使用fastJson解析"></a>使用fastJson解析</h3></blockquote>
<p>使用阿里的fastJson方式解析json,阿里官方介绍说这个比gson效率更高速度更快,使用fastJson的人也非常多,fastJson同样支持常用的数据类型解析,还提供了大文本解析和对时间类型的解析方式,同样也有android版本jar, 但是这个不是C#的FastJson, 首字母大小写是不一样的, 也不是同一个东西, 不可混为一谈.</p>
<p>官网文档: <a href="https://github.com/alibaba/fastjson/wiki/常见问题" target="_blank" rel="external">https://github.com/alibaba/fastjson/wiki/常见问题</a></p>
<p>笔者测试使用的版本是1.1.41,下载地址: <a href="http://repo1.maven.org/maven2/com/alibaba/fastjson/1.1.41/" target="_blank" rel="external">http://repo1.maven.org/maven2/com/alibaba/fastjson/1.1.41/</a><br>fastJson其它版本官方下载地址:<a href="http://repo1.maven.org/maven2/com/alibaba/fastjson/" target="_blank" rel="external">http://repo1.maven.org/maven2/com/alibaba/fastjson/</a></p>
<p>maven配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试用例(源码附件fastJson.zip,下载地址:<a href="http://pan.baidu.com/s/1pJE1xsZ" target="_blank" rel="external">http://pan.baidu.com/s/1pJE1xsZ</a>):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// Java bean to json</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JavaBeanToJson</span><span class="params">()</span> </span>&#123;</div><div class="line">        Person person = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"zhanglu"</span>, <span class="string">"Hubei"</span>);</div><div class="line">        String json = JSON.toJSONString(person);</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Json to Javabean</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JsonToJavaBean</span><span class="params">()</span> </span>&#123;</div><div class="line">        String json = <span class="string">"&#123;'address':'Hubei','id':1,'name':'zhanglu'&#125;"</span>;</div><div class="line">        Person person = JSON.parseObject(json, Person.class);</div><div class="line">        System.out.println(person);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// List&lt;JavaBean&gt; to json</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listJavaBeanToJson</span><span class="params">()</span> </span>&#123;</div><div class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"zhanglu"</span>, <span class="string">"Hubei"</span>);</div><div class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="number">2</span>, <span class="string">"wukang"</span>, <span class="string">"Hubei"</span>);</div><div class="line">        List&lt;Person&gt; personlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        personlist.add(p1);</div><div class="line">        personlist.add(p2);</div><div class="line">        String json = JSON.toJSONString(personlist);</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Json to List&lt;JavaBean&gt;</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JsonToListBean</span><span class="params">()</span> </span>&#123;</div><div class="line">        String json = <span class="string">"[&#123;'address':'Hubei','id':1,'name':'zhanglu'&#125;,&#123;'address':'Hubei','id':2,'name':'wukang'&#125;]"</span>;</div><div class="line">        List&lt;Person&gt; persons = JSON.parseArray(json, Person.class);</div><div class="line">        <span class="keyword">for</span> (Person person : persons) &#123;</div><div class="line">            System.out.println(person);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// List&lt;String&gt; to json</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listStringToJson</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        list.add(<span class="string">"zhanglu"</span>);</div><div class="line">        list.add(<span class="string">"wukang"</span>);</div><div class="line">        String json = JSON.toJSONString(list);</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// json to List&lt;String&gt;</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JsonToListString</span><span class="params">()</span> </span>&#123;</div><div class="line">        String json = <span class="string">"['zhanglu','wukang']"</span>;</div><div class="line">        List&lt;String&gt; list = JSON.parseArray(json, String.class);</div><div class="line">        <span class="keyword">for</span> (String str : list) &#123;</div><div class="line">            System.out.println(str);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Map&lt;String,Object&gt; to json</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MapToJson</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, Person&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        map.put(<span class="string">"person1"</span>, <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"zhanglu"</span>, <span class="string">"Hubei"</span>));</div><div class="line">        map.put(<span class="string">"person2"</span>, <span class="keyword">new</span> Person(<span class="number">2</span>, <span class="string">"wukang"</span>, <span class="string">"Hubei"</span>));</div><div class="line">        String json = JSON.toJSONString(map);</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Json to Map&lt;String,JavaBean&gt;</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JsonToMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        String json = <span class="string">"&#123;'person1':&#123;'address':'Hubei','id':1,'name':'zhanglu'&#125;,'person2':&#123;'address':'Hubei','id':2,'name':'wukang'&#125;&#125;"</span>;</div><div class="line">        Map&lt;String, Person&gt; map = JSON.parseObject(json,</div><div class="line">                <span class="keyword">new</span> TypeReference&lt;Map&lt;String, Person&gt;&gt;() &#123;</div><div class="line">                &#125;);</div><div class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</div><div class="line">            System.out.println(<span class="string">"key:"</span> + key);</div><div class="line">            System.out.println(map.get(key));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Test references javaBean</span></div><div class="line">    <span class="comment">// Animail,Cat</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestReferences</span><span class="params">()</span> </span>&#123;</div><div class="line">        Animail animail = <span class="keyword">new</span> Animail();</div><div class="line">        animail.setName(<span class="string">"animial"</span>);</div><div class="line">        Cat cat = <span class="keyword">new</span> Cat();</div><div class="line">        cat.setId(<span class="number">1</span>);</div><div class="line">        cat.setName(<span class="string">"MiMi"</span>);</div><div class="line">        Cat cat2 = <span class="keyword">new</span> Cat();</div><div class="line">        cat2.setId(<span class="number">1</span>);</div><div class="line">        cat2.setName(<span class="string">"CiCi"</span>);</div><div class="line">        cat.setAnimail(animail);</div><div class="line">        cat2.setAnimail(animail);</div><div class="line">        List&lt;Cat&gt; catlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        catlist.add(cat2);</div><div class="line">        catlist.add(cat);</div><div class="line">        animail.setCatlist(catlist);</div><div class="line">        String json = JSON.toJSONString(animail);</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Test references javaBean</span></div><div class="line">    <span class="comment">// Animail,Cat</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestReferences2</span><span class="params">()</span> </span>&#123;</div><div class="line">        Animail animail = <span class="keyword">new</span> Animail();</div><div class="line">        animail.setName(<span class="string">"animial"</span>);</div><div class="line">        Cat cat = <span class="keyword">new</span> Cat();</div><div class="line">        cat.setId(<span class="number">1</span>);</div><div class="line">        cat.setName(<span class="string">"MiMi"</span>);</div><div class="line">        Cat cat2 = <span class="keyword">new</span> Cat();</div><div class="line">        cat2.setId(<span class="number">1</span>);</div><div class="line">        cat2.setName(<span class="string">"CiCi"</span>);</div><div class="line">        cat.setAnimail(animail);</div><div class="line">        cat2.setAnimail(animail);</div><div class="line">        List&lt;Cat&gt; catlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        catlist.add(cat2);</div><div class="line">        catlist.add(cat);</div><div class="line">        animail.setCatlist(catlist);</div><div class="line">        String json = JSON.toJSONString(animail,SerializerFeature.DisableCircularReferenceDetect);</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// methods 01 transient</span></div><div class="line">    <span class="comment">// @JSONField(serialize=false)</span></div><div class="line">    </div><div class="line">    <span class="comment">// Date to Json</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DateToJson</span><span class="params">()</span></span>&#123;</div><div class="line">        StudentInfo studentInfo = <span class="keyword">new</span> StudentInfo();</div><div class="line">        studentInfo.setBirthday(<span class="keyword">new</span> Date());</div><div class="line">        studentInfo.setId(<span class="number">1</span>);</div><div class="line">        JSON.DEFFAULT_DATE_FORMAT = <span class="string">"yyyy-MM-dd"</span>;</div><div class="line">        String json = JSON.toJSONString(studentInfo,SerializerFeature.WriteDateUseDateFormat);</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<h3 id="使用net-sf-json解析"><a href="#使用net-sf-json解析" class="headerlink" title="使用net.sf.json解析"></a>使用net.sf.json解析</h3></blockquote>
<p>官网下载地址:<a href="http://sourceforge.net/projects/json-lib/files/json-lib/" target="_blank" rel="external">http://sourceforge.net/projects/json-lib/files/json-lib/</a></p>
<p>其他依赖包: <code>commons-beanutils  ,  commons-collections ,  commons-lang ,  commons-logging  ,ezmorph , json-lib</code></p>
<p>测试代码(SimpleJson.zip(下载地址:<a href="http://pan.baidu.com/s/1xqWmM" target="_blank" rel="external">http://pan.baidu.com/s/1xqWmM</a>)):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> zhanglu</div><div class="line"> * <span class="doctag">@Desc</span> net.sf.json 测试, commons-collections 4-4.0 不兼容</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJsonTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// JavaBean to Json</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JavaBeanToJson</span><span class="params">()</span> </span>&#123;</div><div class="line">        PersonBean person = <span class="keyword">new</span> PersonBean(<span class="number">1</span>, <span class="string">"zhanglu"</span>, <span class="string">"Hubei"</span>);</div><div class="line">        JSONObject json = JSONObject.fromObject(person);</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Json to JavaBean</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JsonToJavaBean</span><span class="params">()</span> </span>&#123;</div><div class="line">        String json = <span class="string">"&#123;'id':1,'address':'Hubei','name':'zhanglu'&#125;"</span>;</div><div class="line">        PersonBean person = (PersonBean) JSONObject.toBean(JSONObject.fromObject(json), PersonBean.class);</div><div class="line">        System.out.println(person);</div><div class="line">        <span class="comment">// Console result:This is person, id = 1, name = zhanglu, address =</span></div><div class="line">        <span class="comment">// Hubei</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// List&lt;JavaBean&gt; to Json</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ListToJson</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;PersonBean&gt; personlist = <span class="keyword">new</span> ArrayList&lt;PersonBean&gt;();</div><div class="line">        personlist.add(<span class="keyword">new</span> PersonBean(<span class="number">1</span>, <span class="string">"zhanglu"</span>, <span class="string">"Hubei"</span>));</div><div class="line">        personlist.add(<span class="keyword">new</span> PersonBean(<span class="number">2</span>, <span class="string">"maomao"</span>, <span class="string">"Hebei"</span>));</div><div class="line">        String jsonString = JSONArray.fromObject(personlist).toString();</div><div class="line">        System.out.println(jsonString);</div><div class="line">        <span class="comment">// Console</span></div><div class="line">        <span class="comment">// result:[&#123;"id":1,"address":"Hubei","name":"zhanglu"&#125;,&#123;"id":2,"address":"Hebei","name":"maomao"&#125;]</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// JsonString to List&lt;JavaBean&gt;</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JsonStringToList</span><span class="params">()</span> </span>&#123;</div><div class="line">        String jsonString = <span class="string">"[&#123;'id':1,'address':'Hubei','name':'zhanglu'&#125;,&#123;'id':2,'address':'Hebei','name':'maomao'&#125;]"</span>;</div><div class="line">        JSONArray jsonArray = JSONArray.fromObject(jsonString);</div><div class="line">        <span class="comment">// List&lt;PersonBean&gt; list = JSONArray.toList(jsonArray, objectClass);过时</span></div><div class="line">        List&lt;PersonBean&gt; list = JSONArray.toList(jsonArray, <span class="keyword">new</span> PersonBean(),<span class="keyword">new</span> JsonConfig());</div><div class="line">        <span class="keyword">for</span> (PersonBean person : list) &#123;</div><div class="line">            System.out.println(person);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Array to Json</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ArrayToJson</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object[] obj = <span class="keyword">new</span> Object[] &#123; <span class="keyword">new</span> PersonBean(<span class="number">1</span>, <span class="string">"zhanglu"</span>, <span class="string">"Hubei"</span>),<span class="keyword">new</span> PersonBean(<span class="number">2</span>, <span class="string">"maomao"</span>, <span class="string">"Hebei"</span>) &#125;;</div><div class="line">        String jsonString = JSONArray.fromObject(obj).toString();</div><div class="line">        System.out.println(jsonString);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Json to Array</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JsonToArray</span><span class="params">()</span> </span>&#123;</div><div class="line">        String jsonString = <span class="string">"[&#123;'id':1,'address':'Hubei','name':'zhanglu'&#125;,&#123;'id':2,'address':'Hebei','name':'maomao'&#125;]"</span>;</div><div class="line">        JSONArray jsonArray = JSONArray.fromObject(jsonString);</div><div class="line">        Object[] obj = (Object[]) JSONArray.toArray(jsonArray, PersonBean.class);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; obj.length; i++) &#123;</div><div class="line">            System.out.println((PersonBean) obj[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Map to Json</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MapToJson</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, PersonBean&gt; map = <span class="keyword">new</span> HashMap&lt;String, PersonBean&gt;();</div><div class="line">        map.put(<span class="string">"person1"</span>, <span class="keyword">new</span> PersonBean(<span class="number">1</span>, <span class="string">"zhanglu"</span>, <span class="string">"Hubei"</span>));</div><div class="line">        map.put(<span class="string">"person2"</span>, <span class="keyword">new</span> PersonBean(<span class="number">2</span>, <span class="string">"maomao"</span>, <span class="string">"Hebei"</span>));</div><div class="line">        String json = JSONObject.fromObject(map).toString();</div><div class="line">        System.out.println(json);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Json to map</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JsonToMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        String jsonStr = <span class="string">"&#123;'person1':&#123;'id':1,'address':'Hubei','name':'zhanglu'&#125;,'person2':&#123;'id':2,'address':'Hebei','name':'maomao'&#125;&#125;"</span>;</div><div class="line">        JSONObject jsonObject = JSONObject.fromObject(jsonStr);</div><div class="line">        Map&lt;String,PersonBean&gt; map = <span class="keyword">new</span> HashMap&lt;String,PersonBean&gt;();</div><div class="line">        <span class="keyword">for</span> (Iterator&lt;?&gt; iter = jsonObject.keys(); iter.hasNext();) &#123;</div><div class="line">            String key = (String) iter.next();</div><div class="line">            map.put(key,(PersonBean)JSONObject.toBean((JSONObject) jsonObject.get(key),PersonBean.class));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(String key : map.keySet())&#123;</div><div class="line">            System.out.println((PersonBean)map.get(key));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//Reference, ClassInfoBean ===&gt; StudentBean   or   ClassInfoBean &lt;=== StudentBean</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReferenceToJson</span><span class="params">()</span></span>&#123;</div><div class="line">        ClassInfoBean classInfo1 = <span class="keyword">new</span> ClassInfoBean(<span class="number">1</span>,<span class="string">"Java_1"</span>);</div><div class="line">        ClassInfoBean classInfo2 = <span class="keyword">new</span> ClassInfoBean(<span class="number">2</span>,<span class="string">"Java_2"</span>);</div><div class="line">        StudentInfo student1 = <span class="keyword">new</span> StudentInfo(<span class="number">1</span>, <span class="string">"zhanglu"</span>, classInfo1);</div><div class="line">        StudentInfo student2 = <span class="keyword">new</span> StudentInfo(<span class="number">2</span>, <span class="string">"wukang"</span>, classInfo1);</div><div class="line">        StudentInfo student3 = <span class="keyword">new</span> StudentInfo(<span class="number">3</span>, <span class="string">"maomao"</span>, classInfo2);</div><div class="line">        List&lt;StudentInfo&gt; stulist = <span class="keyword">new</span> ArrayList&lt;StudentInfo&gt;();</div><div class="line">        stulist.add(student1);</div><div class="line">        stulist.add(student2);</div><div class="line">        stulist.add(student3);</div><div class="line">        String jsonString  = JSONArray.fromObject(stulist).toString();</div><div class="line">        System.out.println(jsonString);</div><div class="line">        <span class="comment">//Console result:</span></div><div class="line">        <span class="comment">//[&#123;"id":1,"classInfo":&#123;"classId":1,"className":"Java_1"&#125;,"stuName":"zhanglu"&#125;,</span></div><div class="line">        <span class="comment">// &#123;"id":2,"classInfo":&#123;"classId":1,"className":"Java_1"&#125;,"stuName":"wukang"&#125;,</span></div><div class="line">        <span class="comment">// &#123;"id":3,"classInfo":&#123;"classId":2,"className":"Java_2"&#125;,"stuName":"maomao"&#125;]</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//references to bean</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RefrenceToBean</span><span class="params">()</span></span>&#123;</div><div class="line">        String json = <span class="string">"[&#123;'id':1,'classInfo':&#123;'classId':1,'className':'Java_1'&#125;,'stuName':'zhanglu'&#125;,&#123;'id':2,'classInfo':&#123;'classId':1,'className':'Java_1'&#125;,'stuName':'wukang'&#125;,&#123;'id':3,'classInfo':&#123;'classId':2,'className':'Java_2'&#125;,'stuName':'maomao'&#125;]"</span>;</div><div class="line">        JSONArray jsonArray = JSONArray.fromObject(json);</div><div class="line">        List&lt;StudentInfo&gt; list = JSONArray.toList(jsonArray, <span class="keyword">new</span> StudentInfo(),<span class="keyword">new</span> JsonConfig());</div><div class="line">        <span class="keyword">for</span> (StudentInfo stu : list) &#123;</div><div class="line">            System.out.println(stu);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//Console result:</span></div><div class="line">        <span class="comment">//This is a student , id = 1, name = zhanglu,ClassInfo: className = Java_1</span></div><div class="line">        <span class="comment">//This is a student , id = 2, name = wukang,ClassInfo: className = Java_1</span></div><div class="line">        <span class="comment">//This is a student , id = 3, name = maomao,ClassInfo: className = Java_2</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//Error Reference Animail &lt;==&gt; Cat</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ErrorReferemce</span><span class="params">()</span></span>&#123;</div><div class="line">        Animail animail = <span class="keyword">new</span> Animail();</div><div class="line">        animail.setId(<span class="number">1</span>);</div><div class="line">        animail.setName(<span class="string">"猫"</span>);</div><div class="line">        List&lt;Cat&gt; catlist = <span class="keyword">new</span> ArrayList&lt;Cat&gt;();</div><div class="line">        catlist.add(<span class="keyword">new</span> Cat(<span class="number">1</span>, <span class="string">"MiMi"</span>, animail));</div><div class="line">        catlist.add(<span class="keyword">new</span> Cat(<span class="number">2</span>, <span class="string">"喵喵"</span>, animail));</div><div class="line">        catlist.add(<span class="keyword">new</span> Cat(<span class="number">3</span>, <span class="string">"CiCi"</span>, animail));</div><div class="line">        animail.setCatlist(catlist);<span class="comment">//双向</span></div><div class="line">        String json = JSONArray.fromObject(animail).toString();</div><div class="line">        System.out.println(json);</div><div class="line">        <span class="comment">//net.sf.json.JSONException: There is a cycle in the hierarchy!</span></div><div class="line">        <span class="comment">//双向引用会出现死循环. 如果没有异常, 这也是一个错误的结果, 导致json数据庞大 , 可能会出现内存溢出</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//References filter JsonConfig</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReferencesFiterJsonConfig</span><span class="params">()</span></span>&#123;</div><div class="line">        JsonConfig config = <span class="keyword">new</span> JsonConfig();</div><div class="line">        config.setJsonPropertyFilter(<span class="keyword">new</span> PropertyFilter() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(Object source, String name, Object value)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> name.equals(<span class="string">"catlist"</span>);<span class="comment">//设置过滤catlist集合</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        Animail animail = <span class="keyword">new</span> Animail();</div><div class="line">        animail.setId(<span class="number">1</span>);</div><div class="line">        animail.setName(<span class="string">"猫"</span>);</div><div class="line">        List&lt;Cat&gt; catlist = <span class="keyword">new</span> ArrayList&lt;Cat&gt;();</div><div class="line">        catlist.add(<span class="keyword">new</span> Cat(<span class="number">1</span>, <span class="string">"MiMi"</span>, animail));</div><div class="line">        catlist.add(<span class="keyword">new</span> Cat(<span class="number">2</span>, <span class="string">"喵喵"</span>, animail));</div><div class="line">        catlist.add(<span class="keyword">new</span> Cat(<span class="number">3</span>, <span class="string">"CiCi"</span>, animail));</div><div class="line">        animail.setCatlist(catlist);<span class="comment">//双向</span></div><div class="line">        String json = JSONArray.fromObject(animail,config).toString();<span class="comment">//引用配置对象</span></div><div class="line">        System.out.println(json);</div><div class="line">        <span class="comment">//Console result:[&#123;"id":1,"name":"猫"&#125;]</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//References filter</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilterProperty</span><span class="params">()</span></span>&#123;</div><div class="line">        Animail animail = <span class="keyword">new</span> Animail();</div><div class="line">        animail.setId(<span class="number">1</span>);</div><div class="line">        animail.setName(<span class="string">"猫"</span>);</div><div class="line">        List&lt;Cat&gt; catlist = <span class="keyword">new</span> ArrayList&lt;Cat&gt;();</div><div class="line">        catlist.add(<span class="keyword">new</span> Cat(<span class="number">1</span>, <span class="string">"MiMi"</span>, animail));</div><div class="line">        catlist.add(<span class="keyword">new</span> Cat(<span class="number">2</span>, <span class="string">"喵喵"</span>, animail));</div><div class="line">        catlist.add(<span class="keyword">new</span> Cat(<span class="number">3</span>, <span class="string">"CiCi"</span>, animail));</div><div class="line">        animail.setCatlist(catlist);<span class="comment">//双向</span></div><div class="line">        JsonConfig config = <span class="keyword">new</span> JsonConfig();</div><div class="line">        config.setExcludes(<span class="keyword">new</span> String[]&#123;<span class="string">"catlist"</span>&#125;);</div><div class="line">        String json = JSONArray.fromObject(animail,config).toString();<span class="comment">//引用配置对象</span></div><div class="line">        System.out.println(json);</div><div class="line">        <span class="comment">//Console result:[&#123;"id":1,"name":"猫"&#125;]</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JSON和XML比较]]></title>
      <url>tbwang.win/JSON%E5%92%8CXML%E6%AF%94%E8%BE%83.html</url>
      <content type="html"><![CDATA[<h3 id="定义介绍"><a href="#定义介绍" class="headerlink" title="定义介绍"></a>定义介绍</h3><blockquote>
<p>XML定义</p>
</blockquote>
<p>扩展标记语言 (Extensible Markup Language, XML) ，用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。 XML使用DTD(document type definition)文档类型定义来组织数据;格式统一，跨平台和语言，早已成为业界公认的标准。<br>XML是标准通用标记语言 (SGML) 的子集，非常适合 Web 传输。XML 提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据。</p>
<a id="more"></a>
<blockquote>
<p>JSON定义</p>
</blockquote>
<p>JSON(JavaScript Object Notation)一种轻量级的数据交换格式，具有良好的可读和便于快速编写的特性。可在不同平台之间进行数据交换。JSON采用兼容性很高的、完全独立于语言文本格式，同时也具备类似于C语言的习惯(包括C, C++, C#, Java, JavaScript, Perl, Python等)体系的行为。这些特性使JSON成为理想的数据交换语言。<br>JSON基于JavaScript Programming Language , Standard ECMA-262 3rd Edition - December 1999 的一个子集。</p>
<h3 id="XML和JSON优缺点"><a href="#XML和JSON优缺点" class="headerlink" title="XML和JSON优缺点"></a>XML和JSON优缺点</h3><blockquote>
<p>XML的优缺点</p>
</blockquote>
<p><strong><1>.XML的优点</1></strong><br>　　A.格式统一，符合标准；<br>　　B.容易与其他系统进行远程交互，数据共享比较方便。<br><strong><2>.XML的缺点</2></strong><br>　　A.XML文件庞大，文件格式复杂，传输占带宽；<br>　　B.服务器端和客户端都需要花费大量代码来解析XML，导致服务器端和客户端代码变得异常复杂且不易维护；<br>　　C.客户端不同浏览器之间解析XML的方式不一致，需要重复编写很多代码；<br>　　D.服务器端和客户端解析XML花费较多的资源和时间。</p>
<blockquote>
<p>JSON的优缺点</p>
</blockquote>
<p><strong><1>.JSON的优点</1></strong><br>　　A.数据格式比较简单，易于读写，格式都是压缩的，占用带宽小；<br>　　B.易于解析，客户端JavaScript可以简单的通过eval()进行JSON数据的读取；<br>　　C.支持多种语言，包括ActionScript, C, C#, ColdFusion, Java, JavaScript, Perl, PHP, Python, Ruby等服务器端语言，便于服务器端的解析；<br>　　D.在PHP世界，已经有PHP-JSON和JSON-PHP出现了，偏于PHP序列化后的程序直接调用，PHP服务器端的对象、数组等能直接生成JSON格式，便于客户端的访问提取；<br>　　E.因为JSON格式能直接为服务器端代码使用，大大简化了服务器端和客户端的代码开发量，且完成任务不变，并且易于维护。<br><strong><2>.JSON的缺点</2></strong><br>　　A.没有XML格式这么推广的深入人心和喜用广泛，没有XML那么通用性；<br>　　B.JSON格式目前在Web Service中推广还属于初级阶段。</p>
<h3 id="XML和JSON的优缺点对比"><a href="#XML和JSON的优缺点对比" class="headerlink" title="XML和JSON的优缺点对比"></a>XML和JSON的优缺点对比</h3><blockquote>
<p>可读性方面。</p>
</blockquote>
<p>JSON和XML的数据可读性基本相同，JSON和XML的可读性可谓不相上下，一边是建议的语法，一边是规范的标签形式，XML可读性较好些。</p>
<blockquote>
<p>可扩展性方面。</p>
</blockquote>
<p>XML天生有很好的扩展性，JSON当然也有，没有什么是XML能扩展，JSON不能的。</p>
<blockquote>
<p>编码难度方面。</p>
</blockquote>
<p>XML有丰富的编码工具，比如Dom4j、JDom等，JSON也有json.org提供的工具，但是JSON的编码明显比XML容易许多，即使不借助工具也能写出JSON的代码，可是要写好XML就不太容易了。</p>
<blockquote>
<p>解码难度方面。</p>
</blockquote>
<p>XML的解析得考虑子节点父节点，让人头昏眼花，而JSON的解析难度几乎为0。这一点XML输的真是没话说。</p>
<blockquote>
<p>流行度方面。</p>
</blockquote>
<p>XML已经被业界广泛的使用，而JSON才刚刚开始，但是在Ajax这个特定的领域，未来的发展一定是XML让位于JSON。到时Ajax应该变成Ajaj(Asynchronous Javascript and JSON)了。</p>
<blockquote>
<p>解析手段方面。</p>
</blockquote>
<p>JSON和XML同样拥有丰富的解析手段。</p>
<blockquote>
<p>数据体积方面。</p>
</blockquote>
<p>JSON相对于XML来讲，数据的体积小，传递的速度更快些。</p>
<blockquote>
<p>数据交互方面。</p>
</blockquote>
<p>JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。</p>
<blockquote>
<p>数据描述方面。</p>
</blockquote>
<p>JSON对数据的描述性比XML较差。</p>
<blockquote>
<p>传输速度方面。</p>
</blockquote>
<p>JSON的速度要远远快于XML。</p>
<h3 id="XML与JSON数据格式比较"><a href="#XML与JSON数据格式比较" class="headerlink" title="XML与JSON数据格式比较"></a>XML与JSON数据格式比较</h3><blockquote>
<p>关于轻量级和重量级</p>
</blockquote>
<p>轻量级和重量级是相对来说的，那么XML相对于JSON的重量级体现在哪呢?应该体现在解析上，XML目前设计了两种解析方式：DOM和 SAX。<br><strong><1>.DOM</1></strong><br>DOM是把一个数据交换格式XML看成一个DOM对象，需要把XML文件整个读入内存，这一点上JSON和XML的原理是一样的，但是XML要考虑父节点和子节点，这一点上JSON的解析难度要小很多，因为JSON构建于两种结构：key/value，键值对的集合;值的有序集合，可理解为数组；<br><strong><2>.SAX</2></strong><br>SAX不需要整个读入文档就可以对解析出的内容进行处理，是一种逐步解析的方法。程序也可以随时终止解析。这样，一个大的文档就可以逐步的、一点一点的展现出来，所以SAX适合于大规模的解析。这一点，JSON目前是做不到得。<br><strong>所以，JSON和XML的轻/重量级的区别在于：</strong><br><code>JSON只提供整体解析方案，而这种方法只在解析较少的数据时才能起到良好的效果；</code><br><code>XML提供了对大规模数据的逐步解析方案，这种方案很适合于对大量数据的处理。</code></p>
<blockquote>
<p>关于数据格式编码及解析难度</p>
</blockquote>
<p><strong><1>.在编码方面。</1></strong><br>虽然XML和JSON都有各自的编码工具，但是JSON的编码要比XML简单，即使不借助工具，也可以写出JSON代码，但要写出好的XML代码就有点困难;与XML一样，JSON也是基于文本的，且它们都使用Unicode编码，且其与数据交换格式XML一样具有可读性。<br>主观上来看，JSON更为清晰且冗余更少些。JSON网站提供了对JSON语法的严格描述，只是描述较简短。从总体来看，XML比较适合于标记文档，而JSON却更适于进行数据交换处理。<br><strong><2>.在解析方面。</2></strong><br>在普通的web应用领域，开发者经常为XML的解析伤脑筋，无论是服务器端生成或处理XML，还是客户端用 JavaScript 解析XML，都常常导致复杂的代码，极低的开发效率。<br>实际上，对于大多数Web应用来说，他们根本不需要复杂的XML来传输数据，XML宣称的扩展性在此就很少具有优势,许多Ajax应用甚至直接返回HTML片段来构建动态Web页面。和返回XML并解析它相比，返回HTML片段大大降低了系统的复杂性，但同时缺少了一定的灵活性。同XML或 HTML片段相比，数据交换格式JSON 提供了更好的简单性和灵活性。在Web Serivice应用中，至少就目前来说XML仍有不可动摇的地位。</p>
<blockquote>
<p>实例比较</p>
</blockquote>
<p>XML和JSON都使用结构化方法来标记数据，下面来做一个简单的比较。</p>
<p><1>.用XML表示中国部分省市数据如下：</1></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">country</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">province</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>黑龙江<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">citys</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">city</span>&gt;</span>哈尔滨<span class="tag">&lt;/<span class="name">city</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">city</span>&gt;</span>大庆<span class="tag">&lt;/<span class="name">city</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">citys</span>&gt;</span>  　　</div><div class="line">  <span class="tag">&lt;/<span class="name">province</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">province</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>广东<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">citys</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">city</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">city</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">city</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">city</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">city</span>&gt;</span>珠海<span class="tag">&lt;/<span class="name">city</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">citys</span>&gt;</span> 　　</div><div class="line">  <span class="tag">&lt;/<span class="name">province</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">province</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>台湾<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">citys</span>&gt;</span></div><div class="line">      　<span class="tag">&lt;<span class="name">city</span>&gt;</span>台北<span class="tag">&lt;/<span class="name">city</span>&gt;</span></div><div class="line">      　<span class="tag">&lt;<span class="name">city</span>&gt;</span>高雄<span class="tag">&lt;/<span class="name">city</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">citys</span>&gt;</span>　</div><div class="line">  <span class="tag">&lt;/<span class="name">province</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">province</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>新疆<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">citys</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">city</span>&gt;</span>乌鲁木齐<span class="tag">&lt;/<span class="name">city</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">citys</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">province</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">country</span>&gt;</span></div></pre></td></tr></table></figure>
<p><2>.用JSON表示中国部分省市数据如下：</2></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> country =</div><div class="line">       &#123;</div><div class="line">           <span class="attr">name</span>: <span class="string">"中国"</span>,</div><div class="line">           <span class="attr">provinces</span>: [</div><div class="line">           &#123; <span class="attr">name</span>: <span class="string">"黑龙江"</span>, <span class="attr">citys</span>: &#123; <span class="attr">city</span>: [<span class="string">"哈尔滨"</span>, <span class="string">"大庆"</span>]&#125; &#125;,</div><div class="line">           &#123; <span class="attr">name</span>: <span class="string">"广东"</span>, <span class="attr">citys</span>: &#123; <span class="attr">city</span>: [<span class="string">"广州"</span>, <span class="string">"深圳"</span>, <span class="string">"珠海"</span>]&#125; &#125;,</div><div class="line">           &#123; <span class="attr">name</span>: <span class="string">"台湾"</span>, <span class="attr">citys</span>: &#123; <span class="attr">city</span>: [<span class="string">"台北"</span>, <span class="string">"高雄"</span>]&#125; &#125;,</div><div class="line">           &#123; <span class="attr">name</span>: <span class="string">"新疆"</span>, <span class="attr">citys</span>: &#123; <span class="attr">city</span>: [<span class="string">"乌鲁木齐"</span>]&#125; &#125;</div><div class="line">           ]</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>编码的可读性来说，XML有明显的优势，毕竟人类的语言更贴近这样的说明结构。JSON读起来更像一个数据块，读起来就比较费解了。不过，我们读起来费解的语言，恰恰是适合机器阅读，所以通过JSON的索引country.provinces[0].name就能够读取“黑龙江”这个值。<br>编码的手写难度来说，XML还是舒服一些，好读当然就好写。不过写出来的字符JSON就明显少很多。去掉空白制表以及换行的话，JSON就是密密麻麻的有用数据，而XML却包含很多重复的标记字符。</p>
<p>参考博客：<a href="http://www.cnblogs.com/SanMaoSpace/p/3139186.html" target="_blank" rel="external">JSON与XML的区别比较</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JSON基础学习]]></title>
      <url>tbwang.win/Json%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0.html</url>
      <content type="html"><![CDATA[<hr>
<p><em>以下内容主要从w3school学习整理并记录</em></p>
<hr>
<blockquote>
<h3 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是JSON</h3></blockquote>
<ul>
<li>JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）</li>
<li>JSON 是轻量级的文本数据交换格式</li>
<li>JSON 独立于语言</li>
<li>JSON 具有自我描述性，更易理解</li>
<li>JSON 比 XML 更小、更快，更易解析。</li>
</ul>
<p>JSON 文本格式在语法上与创建 JavaScript 对象的代码相同。<br>由于这种相似性，无需解析器，JavaScript 程序能够使用内建的 eval() 函数，用 JSON 数据来生成原生的 JavaScript 对象。<br><a id="more"></a></p>
<blockquote>
<h3 id="JSON语法规则"><a href="#JSON语法规则" class="headerlink" title="JSON语法规则"></a>JSON语法规则</h3></blockquote>
<p>Json语法史JavaScript对象表示法语法的子集。</p>
<ul>
<li>数据在名称/值对中</li>
<li>数据由逗号分隔</li>
<li>花括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<blockquote>
<h3 id="JSON-名称-值对"><a href="#JSON-名称-值对" class="headerlink" title="JSON 名称/值对"></a>JSON 名称/值对</h3></blockquote>
<p>JSON 数据的书写格式是：名称/值对。<br>名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"firstName"</span> : <span class="string">"John"</span></div></pre></td></tr></table></figure></p>
<p>这很容易理解，等价于这条 JavaScript 语句：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firstName = <span class="string">"John"</span></div></pre></td></tr></table></figure></p>
<blockquote>
<h3 id="JSON-值"><a href="#JSON-值" class="headerlink" title="JSON 值"></a>JSON 值</h3></blockquote>
<p><strong>JSON 值可以是：</strong></p>
<ul>
<li>数字（整数或浮点数）</li>
<li>字符串（在双引号中）</li>
<li>逻辑值（true 或 false）</li>
<li>数组（在方括号中）</li>
<li>对象（在花括号中）</li>
<li>null</li>
</ul>
<blockquote>
<h3 id="JSON-对象"><a href="#JSON-对象" class="headerlink" title="JSON 对象"></a>JSON 对象</h3></blockquote>
<p>JSON 对象在花括号中书写：<br>对象可以包含多个名称/值对：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">"firstName"</span>:<span class="string">"John"</span> , <span class="string">"lastName"</span>:<span class="string">"Doe"</span> &#125;</div></pre></td></tr></table></figure></p>
<p>这一点也容易理解，与这条 JavaScript 语句等价：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">firstName = <span class="string">"John"</span></div><div class="line">lastName = <span class="string">"Doe"</span></div></pre></td></tr></table></figure></p>
<blockquote>
<h3 id="JSON-数组"><a href="#JSON-数组" class="headerlink" title="JSON 数组"></a>JSON 数组</h3></blockquote>
<p>JSON 数组在方括号中书写：<br>数组可包含多个对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"employees"</span>: [</div><div class="line">&#123; <span class="string">"firstName"</span>:<span class="string">"John"</span> , <span class="string">"lastName"</span>:<span class="string">"Doe"</span> &#125;,</div><div class="line">&#123; <span class="string">"firstName"</span>:<span class="string">"Anna"</span> , <span class="string">"lastName"</span>:<span class="string">"Smith"</span> &#125;,</div><div class="line">&#123; <span class="string">"firstName"</span>:<span class="string">"Peter"</span> , <span class="string">"lastName"</span>:<span class="string">"Jones"</span> &#125;</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在上面的例子中，对象 “employees” 是包含三个对象的数组。每个对象代表一条关于某人（有姓和名）的记录。<br>JSON 使用 JavaScript 语法<br>因为 JSON 使用 JavaScript 语法，所以无需额外的软件就能处理 JavaScript 中的 JSON。<br>通过 JavaScript，您可以创建一个对象数组，并像这样进行赋值：<br>例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> employees = [</div><div class="line">&#123; <span class="string">"firstName"</span>:<span class="string">"Bill"</span> , <span class="string">"lastName"</span>:<span class="string">"Gates"</span> &#125;,</div><div class="line">&#123; <span class="string">"firstName"</span>:<span class="string">"George"</span> , <span class="string">"lastName"</span>:<span class="string">"Bush"</span> &#125;,</div><div class="line">&#123; <span class="string">"firstName"</span>:<span class="string">"Thomas"</span> , <span class="string">"lastName"</span>: <span class="string">"Carter"</span> &#125;</div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>可以像这样访问 JavaScript 对象数组中的第一项：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">employees[<span class="number">0</span>].lastName;</div></pre></td></tr></table></figure></p>
<p>返回的内容是：<code>Gates</code><br>可以像这样修改数据：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">employees[<span class="number">0</span>].lastName = <span class="string">"Jobs"</span>;</div></pre></td></tr></table></figure></p>
<blockquote>
<h3 id="JSON-文件"><a href="#JSON-文件" class="headerlink" title="JSON 文件"></a>JSON 文件</h3></blockquote>
<p>JSON 文件的文件类型是 <code>&quot;.json&quot;</code><br>JSON 文本的 MIME 类型是 <code>&quot;application/json&quot;</code></p>
<blockquote>
<h3 id="JSON文本转换为javaScript对象"><a href="#JSON文本转换为javaScript对象" class="headerlink" title="JSON文本转换为javaScript对象"></a>JSON文本转换为javaScript对象</h3></blockquote>
<p>创建包含 JSON 语法的 JavaScript 字符串：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> txt = <span class="string">'&#123; "employees" : ['</span> +</div><div class="line"><span class="string">'&#123; "firstName":"Bill" , "lastName":"Gates" &#125;,'</span> +</div><div class="line"><span class="string">'&#123; "firstName":"George" , "lastName":"Bush" &#125;,'</span> +</div><div class="line"><span class="string">'&#123; "firstName":"Thomas" , "lastName":"Carter" &#125; ]&#125;'</span>;</div></pre></td></tr></table></figure></p>
<p>由于 JSON 语法是 JavaScript 语法的子集，JavaScript 函数 eval() 可用于将 JSON 文本转换为 JavaScript 对象。<br><code>eval()</code> 函数使用的是 JavaScript 编译器，可解析 JSON 文本，然后生成 JavaScript 对象。必须把文本包围在括号中，这样才能避免语法错误：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span> (<span class="string">"("</span> + txt + <span class="string">")"</span>);</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>通过 JSON 字符串来创建对象<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">First Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"fname"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </div><div class="line">Last Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"lname"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> txt = <span class="string">'&#123;"employees":['</span> +</div><div class="line"><span class="string">'&#123;"firstName":"Bill","lastName":"Gates" &#125;,'</span> +</div><div class="line"><span class="string">'&#123;"firstName":"George","lastName":"Bush" &#125;,'</span> +</div><div class="line"><span class="string">'&#123;"firstName":"Thomas","lastName":"Carter" &#125;]&#125;'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span> (<span class="string">"("</span> + txt + <span class="string">")"</span>);</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"fname"</span>).innerHTML=obj.employees[<span class="number">1</span>].firstName </div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"lname"</span>).innerHTML=obj.employees[<span class="number">1</span>].lastName </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[四种生成和解析XML文档的方法(转)]]></title>
      <url>tbwang.win/%E5%9B%9B%E7%A7%8D%E7%94%9F%E6%88%90%E5%92%8C%E8%A7%A3%E6%9E%90XML%E6%96%87%E6%A1%A3%E7%9A%84%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3.html</url>
      <content type="html"><![CDATA[<p><strong>感谢原文作者分享，<a href="http://www.cnblogs.com/lanxuezaipiao/archive/2013/05/17/3082949.html" target="_blank" rel="external">地址</a></strong></p>
<hr>
<p>众所周知，现在解析XML的方法越来越多，但主流的方法也就四种，即：DOM、SAX、JDOM和DOM4J</p>
<p>下面首先给出这四种方法的jar包下载地址</p>
<p>DOM：在现在的Java JDK里都自带了，在xml-apis.jar包里</p>
<p>SAX：<a href="http://sourceforge.net/projects/sax/" target="_blank" rel="external">http://sourceforge.net/projects/sax/</a></p>
<p>JDOM：<a href="http://jdom.org/downloads/index.html" target="_blank" rel="external">http://jdom.org/downloads/index.html</a></p>
<p>DOM4J：<a href="http://sourceforge.net/projects/dom4j/" target="_blank" rel="external">http://sourceforge.net/projects/dom4j/</a></p>
<a id="more"></a>
<h3 id="一、介绍及优缺点分析"><a href="#一、介绍及优缺点分析" class="headerlink" title="一、介绍及优缺点分析"></a>一、介绍及优缺点分析</h3><blockquote>
<p>DOM（Document Object Model)</p>
</blockquote>
<p>DOM是用与平台和语言无关的方式表示XML文档的官方W3C标准。DOM是以层次结构组织的节点或信息片断的集合。这个层次结构允许开发人员在树中寻找特定信息。分析该结构通常需要加载整个文档和构造层次结构，然后才能做任何工作。由于它是基于信息层次的，因而DOM被认为是基于树或基于对象的。</p>
<p>【优点】</p>
<ul>
<li>允许应用程序对数据和结构做出更改。</li>
<li>访问是双向的，可以在任何时候在树中上下导航，获取和操作任意部分的数据。</li>
</ul>
<p>【缺点】</p>
<ul>
<li>通常需要加载整个XML文档来构造层次结构，消耗资源大。</li>
</ul>
<blockquote>
<p>SAX（Simple API for XML)</p>
</blockquote>
<p>SAX处理的优点非常类似于流媒体的优点。分析能够立即开始，而不是等待所有的数据被处理。而且，由于应用程序只是在读取数据时检查数据，因此不需要将数据存储在内存中。这对于大型文档来说是个巨大的优点。事实上，应用程序甚至不必解析整个文档；它可以在某个条件得到满足时停止解析。一般来说，SAX还比它的替代者DOM快许多。</p>
<p>选择DOM还是选择SAX？ 对于需要自己编写代码来处理XML文档的开发人员来说， 选择DOM还是SAX解析模型是一个非常重要的设计决策。 DOM采用建立树形结构的方式访问XML文档，而SAX采用的是事件模型。</p>
<p>DOM解析器把XML文档转化为一个包含其内容的树，并可以对树进行遍历。用DOM解析模型的优点是编程容易，开发人员只需要调用建树的指令，然后利用navigation APIs访问所需的树节点来完成任务。可以很容易的添加和修改树中的元素。然而由于使用DOM解析器的时候需要处理整个XML文档，所以对性能和内存的要求比较高，尤其是遇到很大的XML文件的时候。由于它的遍历能力，DOM解析器常用于XML文档需要频繁的改变的服务中。</p>
<p>SAX解析器采用了基于事件的模型，它在解析XML文档的时候可以触发一系列的事件，当发现给定的tag的时候，它可以激活一个回调方法，告诉该方法制定的标签已经找到。SAX对内存的要求通常会比较低，因为它让开发人员自己来决定所要处理的tag.特别是当开发人员只需要处理文档中所包含的部分数据时，SAX这种扩展能力得到了更好的体现。但用SAX解析器的时候编码工作会比较困难，而且很难同时访问同一个文档中的多处不同数据。</p>
<p>【优势】</p>
<ul>
<li>不需要等待所有数据都被处理，分析就能立即开始。</li>
<li>只在读取数据时检查数据，不需要保存在内存中。</li>
<li>可以在某个条件得到满足时停止解析，不必解析整个文档。</li>
<li>效率和性能较高，能解析大于系统内存的文档。</li>
</ul>
<p>【缺点】</p>
<ul>
<li>需要应用程序自己负责TAG的处理逻辑（例如维护父/子关系等），文档越复杂程序就越复杂。</li>
<li>单向导航，无法定位文档层次，很难同时访问同一文档的不同部分数据，不支持XPath。</li>
</ul>
<blockquote>
<p>JDOM(Java-based Document Object Model)</p>
</blockquote>
<p>JDOM的目的是成为Java特定文档模型，它简化与XML的交互并且比使用DOM实现更快。由于是第一个Java特定模型，JDOM一直得到大力推广和促进。正在考虑通过“Java规范请求JSR-102”将它最终用作“Java标准扩展”。从2000年初就已经开始了JDOM开发。</p>
<p>JDOM与DOM主要有两方面不同。首先，JDOM仅使用具体类而不使用接口。这在某些方面简化了API，但是也限制了灵活性。第二，API大量使用了Collections类，简化了那些已经熟悉这些类的Java开发者的使用。</p>
<p>JDOM文档声明其目的是“使用20%（或更少）的精力解决80%（或更多）Java/XML问题”（根据学习曲线假定为20%）。JDOM对于大多数Java/XML应用程序来说当然是有用的，并且大多数开发者发现API比DOM容易理解得多。JDOM还包括对程序行为的相当广泛检查以防止用户做任何在XML中无意义的事。然而，它仍需要您充分理解XML以便做一些超出基本的工作（或者甚至理解某些情况下的错误）。这也许是比学习DOM或JDOM接口都更有意义的工作。</p>
<p>JDOM自身不包含解析器。它通常使用SAX2解析器来解析和验证输入XML文档（尽管它还可以将以前构造的DOM表示作为输入）。它包含一些转换器以将JDOM表示输出成SAX2事件流、DOM模型或XML文本文档。JDOM是在Apache许可证变体下发布的开放源码。</p>
<p>【优点】</p>
<ul>
<li>使用具体类而不是接口，简化了DOM的API。</li>
<li>大量使用了Java集合类，方便了Java开发人员。</li>
</ul>
<p>【缺点】</p>
<ul>
<li>没有较好的灵活性。</li>
<li>性能较差。</li>
</ul>
<blockquote>
<p>DOM4J(Document Object Model for Java)</p>
</blockquote>
<p>虽然DOM4J代表了完全独立的开发结果，但最初，它是JDOM的一种智能分支。它合并了许多超出基本XML文档表示的功能，包括集成的XPath支持、XML Schema支持以及用于大文档或流化文档的基于事件的处理。它还提供了构建文档表示的选项，它通过DOM4J API和标准DOM接口具有并行访问功能。从2000下半年开始，它就一直处于开发之中。</p>
<p>为支持所有这些功能，DOM4J使用接口和抽象基本类方法。DOM4J大量使用了API中的Collections类，但是在许多情况下，它还提供一些替代方法以允许更好的性能或更直接的编码方法。直接好处是，虽然DOM4J付出了更复杂的API的代价，但是它提供了比JDOM大得多的灵活性。</p>
<p>在添加灵活性、XPath集成和对大文档处理的目标时，DOM4J的目标与JDOM是一样的：针对Java开发者的易用性和直观操作。它还致力于成为比JDOM更完整的解决方案，实现在本质上处理所有Java/XML问题的目标。在完成该目标时，它比JDOM更少强调防止不正确的应用程序行为。</p>
<p>DOM4J是一个非常非常优秀的Java XML API，具有性能优异、功能强大和极端易用使用的特点，同时它也是一个开放源代码的软件。如今你可以看到越来越多的Java软件都在使用DOM4J来读写XML，特别值得一提的是连Sun的JAXM也在用DOM4J.</p>
<p>【优点】</p>
<ul>
<li>大量使用了Java集合类，方便Java开发人员，同时提供一些提高性能的替代方法。</li>
<li>支持XPath。</li>
<li>有很好的性能。</li>
</ul>
<p>【缺点】</p>
<ul>
<li>大量使用了接口，API较为复杂。</li>
</ul>
<h3 id="二、比较"><a href="#二、比较" class="headerlink" title="二、比较"></a>二、比较</h3><ol>
<li>DOM4J性能最好，连Sun的JAXM也在用DOM4J。目前许多开源项目中大量采用DOM4J，例如大名鼎鼎的Hibernate也用DOM4J来读取XML配置文件。如果不考虑可移植性，那就采用DOM4J.</li>
<li>JDOM和DOM在性能测试时表现不佳，在测试10M文档时内存溢出，但可移植。在小文档情况下还值得考虑使用DOM和JDOM.虽然JDOM的开发者已经说明他们期望在正式发行版前专注性能问题，但是从性能观点来看，它确实没有值得推荐之处。另外，DOM仍是一个非常好的选择。DOM实现广泛应用于多种编程语言。它还是许多其它与XML相关的标准的基础，因为它正式获得W3C推荐（与基于非标准的Java模型相对），所以在某些类型的项目中可能也需要它（如在JavaScript中使用DOM）。</li>
<li>SAX表现较好，这要依赖于它特定的解析方式－事件驱动。一个SAX检测即将到来的XML流，但并没有载入到内存（当然当XML流被读入时，会有部分文档暂时隐藏在内存中）。<br>我的看法：如果XML文档较大且不考虑移植性问题建议采用DOM4J；如果XML文档较小则建议采用JDOM；如果需要及时处理而不需要保存数据则考虑SAX。但无论如何，还是那句话：适合自己的才是最好的，如果时间允许，建议大家讲这四种方法都尝试一遍然后选择一种适合自己的即可。</li>
</ol>
<h3 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h3><p>为了节约篇幅，这里暂时不给出这四种建立XML文档的方法与差异，仅给出解析XML文档的代码，如果需要完整工程（建立XML文档+解析XML+测试比较），可去我的CSDN下载。</p>
<p>这里以下面的XML内容为例进行解析：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Alexia<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>Female<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Edward<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>24<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>wjm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>Female<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">"3"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>wh<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>24<span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></div></pre></td></tr></table></figure>
<p>首先定义XML文档解析的接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span> <span class="comment">/**</span></div><div class="line"> 2  * <span class="doctag">@author</span> Alexia</div><div class="line"> 3  *</div><div class="line"> 4  * 定义XML文档解析的接口</div><div class="line"> 5  */</div><div class="line"> <span class="number">6</span> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">XmlDocument</span> </span>&#123;</div><div class="line"> <span class="number">7</span>     </div><div class="line"> <span class="number">8</span>     <span class="comment">/**</span></div><div class="line"> 9      * 解析XML文档</div><div class="line">10      * </div><div class="line">11      * <span class="doctag">@param</span> fileName</div><div class="line">12      *            文件全路径名称</div><div class="line">13      */</div><div class="line"><span class="number">14</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parserXml</span><span class="params">(String fileName)</span></span>;</div><div class="line"><span class="number">15</span> &#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>DOM示例</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xml;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</div><div class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</div><div class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.OutputKeys;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.Transformer;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.TransformerException;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.TransformerFactory;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.dom.DOMSource;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamResult;</div><div class="line"><span class="keyword">import</span> org.w3c.dom.Document;</div><div class="line"><span class="keyword">import</span> org.w3c.dom.Element;</div><div class="line"><span class="keyword">import</span> org.w3c.dom.Node;</div><div class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</div><div class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> Alexia</div><div class="line"> * </div><div class="line"> * DOM 解析XML文档</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DomDemo</span> <span class="keyword">implements</span> <span class="title">XmlDocument</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Document document;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parserXml</span><span class="params">(String fileName)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</div><div class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</div><div class="line">            Document document = db.parse(fileName);</div><div class="line">            NodeList users = document.getChildNodes();</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; users.getLength(); i++) &#123;</div><div class="line">                Node user = users.item(i);</div><div class="line">                NodeList userInfo = user.getChildNodes();</div><div class="line">                </div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; userInfo.getLength(); j++) &#123;</div><div class="line">                    Node node = userInfo.item(j);</div><div class="line">                    NodeList userMeta = node.getChildNodes();</div><div class="line">                    </div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; userMeta.getLength(); k++) &#123;</div><div class="line">                        <span class="keyword">if</span>(userMeta.item(k).getNodeName() != <span class="string">"#text"</span>)</div><div class="line">                            System.out.println(userMeta.item(k).getNodeName()</div><div class="line">                                    + <span class="string">":"</span> + userMeta.item(k).getTextContent());</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    System.out.println();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (SAXException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>SAX示例</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xml;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.StringWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</div><div class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParser;</div><div class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParserFactory;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.OutputKeys;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.Result;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.Transformer;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.sax.SAXTransformerFactory;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.sax.TransformerHandler;</div><div class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamResult;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.xml.sax.Attributes;</div><div class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</div><div class="line"><span class="keyword">import</span> org.xml.sax.helpers.AttributesImpl;</div><div class="line"><span class="keyword">import</span> org.xml.sax.helpers.DefaultHandler;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> Alexia</div><div class="line"> * </div><div class="line"> * SAX 解析XML文档</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaxDemo</span> <span class="keyword">implements</span> <span class="title">XmlDocument</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parserXml</span><span class="params">(String fileName)</span> </span>&#123;</div><div class="line">        SAXParserFactory saxfac = SAXParserFactory.newInstance();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            SAXParser saxparser = saxfac.newSAXParser();</div><div class="line">            InputStream is = <span class="keyword">new</span> FileInputStream(fileName);</div><div class="line">            saxparser.parse(is, <span class="keyword">new</span> MySAXHandler());</div><div class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (SAXException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySAXHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> hasAttribute = <span class="keyword">false</span>;</div><div class="line">    Attributes attributes = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</div><div class="line">        <span class="comment">// System.out.println("文档开始打印了");</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</div><div class="line">        <span class="comment">// System.out.println("文档打印结束了");</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName,</span></span></div><div class="line">            Attributes attributes) <span class="keyword">throws</span> SAXException &#123;</div><div class="line">        <span class="keyword">if</span> (qName.equals(<span class="string">"users"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (qName.equals(<span class="string">"user"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (attributes.getLength() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.attributes = attributes;</div><div class="line">            <span class="keyword">this</span>.hasAttribute = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span></span></div><div class="line">            <span class="keyword">throws</span> SAXException &#123;</div><div class="line">        <span class="keyword">if</span> (hasAttribute &amp;&amp; (attributes != <span class="keyword">null</span>)) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; attributes.getLength(); i++) &#123;</div><div class="line">                System.out.print(attributes.getQName(<span class="number">0</span>) + <span class="string">":"</span></div><div class="line">                        + attributes.getValue(<span class="number">0</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span></span></div><div class="line">            <span class="keyword">throws</span> SAXException &#123;</div><div class="line">        System.out.print(<span class="keyword">new</span> String(ch, start, length));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>JDOM示例</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xml;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.jdom2.Document;</div><div class="line"><span class="keyword">import</span> org.jdom2.Element;</div><div class="line"><span class="keyword">import</span> org.jdom2.JDOMException;</div><div class="line"><span class="keyword">import</span> org.jdom2.input.SAXBuilder;</div><div class="line"><span class="keyword">import</span> org.jdom2.output.XMLOutputter;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> Alexia</div><div class="line"> * </div><div class="line"> * JDOM 解析XML文档</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDomDemo</span> <span class="keyword">implements</span> <span class="title">XmlDocument</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parserXml</span><span class="params">(String fileName)</span> </span>&#123;</div><div class="line">        SAXBuilder builder = <span class="keyword">new</span> SAXBuilder();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Document document = builder.build(fileName);</div><div class="line">            Element users = document.getRootElement();</div><div class="line">            List userList = users.getChildren(<span class="string">"user"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userList.size(); i++) &#123;</div><div class="line">                Element user = (Element) userList.get(i);</div><div class="line">                List userInfo = user.getChildren();</div><div class="line"></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; userInfo.size(); j++) &#123;</div><div class="line">                    System.out.println(((Element) userInfo.get(j)).getName()</div><div class="line">                            + <span class="string">":"</span> + ((Element) userInfo.get(j)).getValue());</div><div class="line"></div><div class="line">                &#125;</div><div class="line">                System.out.println();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (JDOMException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>DOM4J示例</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xml;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileWriter;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.Writer;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.dom4j.Document;</div><div class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</div><div class="line"><span class="keyword">import</span> org.dom4j.DocumentHelper;</div><div class="line"><span class="keyword">import</span> org.dom4j.Element;</div><div class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</div><div class="line"><span class="keyword">import</span> org.dom4j.io.XMLWriter;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> Alexia</div><div class="line"> * </div><div class="line"> * Dom4j 解析XML文档</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dom4jDemo</span> <span class="keyword">implements</span> <span class="title">XmlDocument</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parserXml</span><span class="params">(String fileName)</span> </span>&#123;</div><div class="line">        File inputXml = <span class="keyword">new</span> File(fileName);</div><div class="line">        SAXReader saxReader = <span class="keyword">new</span> SAXReader();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Document document = saxReader.read(inputXml);</div><div class="line">            Element users = document.getRootElement();</div><div class="line">            <span class="keyword">for</span> (Iterator i = users.elementIterator(); i.hasNext();) &#123;</div><div class="line">                Element user = (Element) i.next();</div><div class="line">                <span class="keyword">for</span> (Iterator j = user.elementIterator(); j.hasNext();) &#123;</div><div class="line">                    Element node = (Element) j.next();</div><div class="line">                    System.out.println(node.getName() + <span class="string">":"</span> + node.getText());</div><div class="line">                &#125;</div><div class="line">                System.out.println();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</div><div class="line">            System.out.println(e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记录一些有意义的话]]></title>
      <url>tbwang.win/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E6%9C%89%E6%84%8F%E4%B9%89%E7%9A%84%E8%AF%9D.html</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="不要尝试抵制诱惑，而要远离诱惑"><a href="#不要尝试抵制诱惑，而要远离诱惑" class="headerlink" title="不要尝试抵制诱惑，而要远离诱惑"></a>不要尝试抵制诱惑，而要远离诱惑</h3></blockquote>
<p>我们常常用“出淤泥而不染，浊清涟而不妖”来夸赞一个人抵御诱惑的能力，但是实际上在遍布诱惑的环境里又有几个人能够抵制住诱惑。你在大家都玩游戏的环境里，很难做到不去玩游戏；周围朋友都吸烟，久了也可能也会去吸烟。不否认有些人的自我控制能力很强，可以做到不为外物所影响，但是对于大部分人来说，抵制诱惑的最好方式便是远离诱惑。</p>
<blockquote>
<h3 id="生活中需具备的三种能力"><a href="#生活中需具备的三种能力" class="headerlink" title="生活中需具备的三种能力"></a>生活中需具备的三种能力</h3><ul>
<li>人际交往中的期望值管理能力</li>
<li>阀值自控意识</li>
<li>应对主观时空扭曲的能力<br>(<em>注，这部分内容摘自知乎:<a href="https://www.zhihu.com/topic/19550581/top-answers" target="_blank" rel="external">肥肥猫</a></em>)</li>
</ul>
</blockquote>
<a id="more"></a>
<blockquote>
<p><strong>人际交往中的期望值管理能力</strong></p>
</blockquote>
<p>简单举例子来说就是如果一个人一开始表现的极好，别人对其的心理预期就会很大，后面你必须表现的更好才能够满足别人对你的心理预期。如果后面做错了一件事、或者做的不是足够好那么就会大大降低你在别人心目中的印象。相反一个一开始表现极差的人如果后面突然间有件事情做的很好，就会大大提升其在别人心目中的地位。当然这并不是鼓励你去一开始就表现差，要真正做到有效控制周围人对你的期望值，需要做到在非必要的时刻压抑住自己的表现欲和虚荣心。</p>
<blockquote>
<p><strong>阀值自控意识</strong></p>
</blockquote>
<p>这个阀值和物理上的临界值意思差不多，指的是一个行为反应所需要的最小刺激强度。一个天天看韩剧的人可能会将自己的择偶标准阀值不断提高并忽略自身实际条件的事实，这样子就会导致可能一直找不到合适的对象。提升自控能力合理的控制自己的阀值标准才是王道</p>
<blockquote>
<p><strong>应对时空扭曲的应对能力</strong></p>
</blockquote>
<p>这个说的有点玄乎，还是拿例子下手。我们常常会发现我们会一直记得小时候发生的事情，但是却很难记得清楚半年前我们在干什么。这是因为小时候我们一方面在不断的接受新鲜事物，每一天都要大量未知的事物需要记忆，而现在可能每天都在做重复的事情当然也就没什么印象了。另一方假如把那时候的记忆长度每一年分为一段的话，10岁时那一年的记忆要占到我们记忆长度的十分之一，所以记忆的更清楚、印象更深，而现在记忆长度只有20几分之一，记忆长度变短了，印象也就没那么深了。</p>
<p>谈到这里，我想到了罗胖曾经提到的一个记忆的舒适区和难受区的问题</p>
<blockquote>
<h3 id="记忆的舒适区"><a href="#记忆的舒适区" class="headerlink" title="记忆的舒适区"></a>记忆的舒适区</h3></blockquote>
<p>所谓的记忆的舒适区指的是当我们每天都在做自己熟悉的事情时，记忆处于一种舒适状态，过一段时间以后你会发现你很难记得清楚前几天做了什么事情，同时技能上也几乎没什么增长。而记忆的难受区指的是当你在做自己没做过的事情、学习没学过的知识时，你会处于一种相对不舒服的状态，但是一段时间后你会对这段时间记忆深刻，同时技能上也会获得提升。<br>所以当你最近过的太舒适、或者很难想起最近做了什么时就需要注意了，每天找一些自己以前没做过的事情、学习尚未学习的知识才会让自己的记忆处于一种不舒适但是印象深刻的过程中，自身也会获得成长。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DOM4J处理XML文件]]></title>
      <url>tbwang.win/DOM4j%E5%A4%84%E7%90%86xml%E6%96%87%E4%BB%B6.html</url>
      <content type="html"><![CDATA[<h2 id="DOM4J简介"><a href="#DOM4J简介" class="headerlink" title="DOM4J简介"></a>DOM4J简介</h2><p>Dom4j是一个易用的、开源的库，用于XML，XPath和XSLT。它应用于Java平台，采用了Java集合框架并完全支持DOM，SAX和JAXP。</p>
<h2 id="获取Document对象的三种方式"><a href="#获取Document对象的三种方式" class="headerlink" title="获取Document对象的三种方式"></a>获取Document对象的三种方式</h2><p>解析XML过程是通过获取Document对象，然后继续获取各个节点以及属性等操作，因此获取Document对象是第一步，大体说来，有三种方式：<br><a id="more"></a></p>
<blockquote>
<p>1.自己创建Document对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document document = DocumentHelper.createDocument();  </div><div class="line">Element root = document.addElement(<span class="string">"element"</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>2.通过读取XML文件获取Document对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建SAXReader对象  </span></div><div class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();  </div><div class="line"><span class="comment">//读取文件 转换成Document  </span></div><div class="line">Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"XXXX.xml"</span>));</div></pre></td></tr></table></figure>
<blockquote>
<p>3.读取XML文本内容获取Document对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String xmlStr = <span class="string">"&lt;students&gt;......&lt;/students&gt;"</span>;  </div><div class="line">Document document = DocumentHelper.parseText(xmlStr);</div></pre></td></tr></table></figure>
<h2 id="创建XML文件"><a href="#创建XML文件" class="headerlink" title="创建XML文件"></a>创建XML文件</h2><blockquote>
<p>使用DOM4J方式生成XML文件的步骤如下：</p>
</blockquote>
<ul>
<li>引入JAR包</li>
<li>通过DocumentHelper类的createDocument()创建Document对象</li>
<li>通过Document的addElement()方法创建节点</li>
<li>通过Element的addAttribute()方法为节点添加属性</li>
<li>通过Element的setText()方法为节点设置内容</li>
<li>通过OutputFormat的createPrettyPrint()方法创建OutputFormat对象（会自动缩进、换行）</li>
<li>创建XMLWriter对象，将目的文件包装成OutputStream传入构造方法中，并将OutputFormat对象一并传入其中</li>
<li>通过XMLWriter的write()方法生成XML文件，并将Document对象作为参数传入</li>
<li>关闭XMLWriter对象</li>
</ul>
<blockquote>
<p>下面给出完整代码：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.dom4j.*;</div><div class="line"><span class="keyword">import</span> org.dom4j.io.OutputFormat;</div><div class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</div><div class="line"><span class="keyword">import</span> org.dom4j.io.XMLWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by tbwang on 2017/1/9.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlTest2</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</div><div class="line">        <span class="comment">//读取xml内容</span></div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/Users/w****g/Desktop/xmlTest.xml"</span>);</div><div class="line">        CreateXMLByDOM4J(file);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateXMLByDOM4J</span><span class="params">(File dest)</span> </span>&#123;</div><div class="line">        <span class="comment">// 创建Document对象</span></div><div class="line">        Document document = DocumentHelper.createDocument();</div><div class="line">        <span class="comment">// 创建根节点</span></div><div class="line">        Element rss = document.addElement(<span class="string">"rss"</span>);</div><div class="line">        <span class="comment">//为rss根节点添加属性</span></div><div class="line">        rss.addAttribute(<span class="string">"version"</span>, <span class="string">"2.0"</span>);</div><div class="line">        <span class="comment">// 创建channel子节点</span></div><div class="line">        Element channel = rss.addElement(<span class="string">"channel"</span>);</div><div class="line">        <span class="comment">// 创建title子节点</span></div><div class="line">        Element title = channel.addElement(<span class="string">"title"</span>);</div><div class="line">        <span class="comment">// 设置title节点的值</span></div><div class="line">        title.setText(<span class="string">"&lt;![CDATA[哈哈哈哈哈哈哈哈哈 ]]&gt;"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 创建输出格式(OutputFormat对象)</span></div><div class="line">        OutputFormat format = OutputFormat.createPrettyPrint();</div><div class="line"></div><div class="line">        <span class="comment">///设置输出文件的编码</span></div><div class="line"><span class="comment">//      format.setEncoding("UTF-8");</span></div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 创建XMLWriter对象</span></div><div class="line">            XMLWriter writer = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileOutputStream(dest), format);</div><div class="line"></div><div class="line">            <span class="comment">//设置不自动进行转义</span></div><div class="line">            writer.setEscapeText(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 生成XML文件</span></div><div class="line">            writer.write(document);</div><div class="line"></div><div class="line">            <span class="comment">//关闭XMLWriter对象</span></div><div class="line">            writer.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>若想自定义XML文件的编码方式，可使用OutputFormat对象的setEncoding()方法设置：</p>
<p><strong>设置输出文件的编码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">format.setEncoding(<span class="string">"GBK"</span>);</div></pre></td></tr></table></figure></p>
<p>DOM4J会对某些特殊字符进行自动转义，若不想让DOM4J进行自动转义，我们可以通过<code>XMLWriter</code>的<code>setEscapeText()</code>方法进行设置。</p>
<p>默认情况下，DOM4J会自动进行转义，相当于<code>writer.setEscapeText(true);</code><br>若不想让其自动转义，可使用<code>writer.setEscapeText(false);</code></p>
<h2 id="读取XML内容"><a href="#读取XML内容" class="headerlink" title="读取XML内容"></a>读取XML内容</h2><blockquote>
<p>Java代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readXmlFile</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException</span>&#123;</div><div class="line">    <span class="comment">// 创建saxReader对象</span></div><div class="line">    SAXReader reader = <span class="keyword">new</span> SAXReader();</div><div class="line">    <span class="comment">// 通过read方法读取一个文件 转换成Document对象</span></div><div class="line">    Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"src/xml/test.xml"</span>));</div><div class="line">    <span class="comment">//获取根节点元素对象</span></div><div class="line">    Element node = document.getRootElement();</div><div class="line">    <span class="comment">//遍历所有的元素节点</span></div><div class="line">    listNodes(node);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 遍历当前节点元素下面的所有(元素的)子节点</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> node</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listNodes</span><span class="params">(Element node)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"当前节点的名称：："</span> + node.getName());</div><div class="line">    <span class="comment">// 获取当前节点的所有属性节点</span></div><div class="line">    List&lt;Attribute&gt; list = node.attributes();</div><div class="line">    <span class="comment">// 遍历属性节点</span></div><div class="line">    <span class="keyword">for</span> (Attribute attr : list) &#123;</div><div class="line">        System.out.println(attr.getText() + <span class="string">"-----"</span> + attr.getName()</div><div class="line">                + <span class="string">"---"</span> + attr.getValue());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!(node.getTextTrim().equals(<span class="string">""</span>))) &#123;</div><div class="line">        System.out.println(<span class="string">"文本内容：：：："</span> + node.getText());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 当前节点下面子节点迭代器</span></div><div class="line">    Iterator&lt;Element&gt; it = node.elementIterator();</div><div class="line">    <span class="comment">// 遍历</span></div><div class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">        <span class="comment">// 获取某个子节点对象</span></div><div class="line">        Element e = it.next();</div><div class="line">        <span class="comment">// 对子节点进行遍历</span></div><div class="line">        listNodes(e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>XML文件内容</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">wang</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>书籍<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">book1</span>&gt;</span>十万个冷笑话<span class="tag">&lt;/<span class="name">book1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">book2</span>&gt;</span>万万没想到<span class="tag">&lt;/<span class="name">book2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">wang</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="修改XML内容"><a href="#修改XML内容" class="headerlink" title="修改XML内容"></a>修改XML内容</h2><p>修改XML内容就是根据根节点找到对应的位置去修改节点的属性、内容信息</p>
<blockquote>
<p>Java代码如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.dom4j.*;</div><div class="line"><span class="keyword">import</span> org.dom4j.io.OutputFormat;</div><div class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</div><div class="line"><span class="keyword">import</span> org.dom4j.io.XMLWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.text.DateFormat;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by tbwang on 2017/1/9.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlTest3</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     * <span class="doctag">@throws</span> DocumentException</div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException,</span></div><div class="line">            IOException &#123;</div><div class="line">        String path = XmlTest3.class.getResource(<span class="string">"/"</span>).getFile().toString();</div><div class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();</div><div class="line">        <span class="comment">// 设置读取文件内容的编码</span></div><div class="line">        reader.setEncoding(<span class="string">"GBK"</span>);</div><div class="line">        Document doc = reader.read(path + <span class="string">"xml/test.xml"</span>);</div><div class="line">        <span class="comment">// System.out.println(doc);</span></div><div class="line"></div><div class="line">        <span class="comment">// 修改内容之一: 如果book节点中show属性的内容为yes,则修改成no</span></div><div class="line">        <span class="comment">// 先用xpath查找对象</span></div><div class="line">        <span class="comment">// 根据试用，根节点books的xpath路径要加/或不加都可以。</span></div><div class="line">        List&lt;Attribute&gt; attrList = doc.selectNodes(<span class="string">"books/book/@show"</span>);</div><div class="line">        Iterator&lt;Attribute&gt; i = attrList.iterator();</div><div class="line">        <span class="keyword">while</span> (i.hasNext()) &#123;</div><div class="line">            Attribute attribute = i.next();</div><div class="line">            <span class="keyword">if</span> (attribute.getValue().equalsIgnoreCase(<span class="string">"yes"</span>)) &#123;</div><div class="line">                attribute.setValue(<span class="string">"no"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 修改内容之二: 把owner项内容改为Tshinghua</span></div><div class="line">        <span class="comment">// 并在owner节点中加入date节点,date节点的内容为2017/1/9,还为date节点添加一个属性type</span></div><div class="line">        List&lt;Element&gt; eleList = doc.selectNodes(<span class="string">"owner"</span>);</div><div class="line">        Iterator&lt;Element&gt; eleIter = eleList.iterator();</div><div class="line">        <span class="keyword">if</span> (eleIter.hasNext()) &#123;</div><div class="line">            Element ownerElement = eleIter.next();</div><div class="line">            ownerElement.setText(<span class="string">"Tshinghua"</span>);</div><div class="line">            Element dateElement = ownerElement.addElement(<span class="string">"date"</span>);</div><div class="line">            DateFormat df = SimpleDateFormat.getDateInstance();</div><div class="line">            dateElement.setText(df.format(<span class="keyword">new</span> Date()));</div><div class="line">            ownerElement.addAttribute(<span class="string">"type"</span>, <span class="string">"Gregorian calendar"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 修改内容之三: 若title内容为Dom4j Tutorials,则删除该节点</span></div><div class="line">        eleList = doc.selectNodes(<span class="string">"books/book"</span>);</div><div class="line">        eleIter = eleList.iterator();</div><div class="line">        <span class="keyword">while</span> (eleIter.hasNext()) &#123;</div><div class="line">            Element element = eleIter.next();</div><div class="line">            Iterator&lt;Element&gt; titleIter = element.elementIterator(<span class="string">"title"</span>);</div><div class="line">            <span class="keyword">while</span> (titleIter.hasNext()) &#123;</div><div class="line">                Element title = titleIter.next();</div><div class="line">                <span class="keyword">if</span> (title.getText().equalsIgnoreCase(<span class="string">"Dom4j Tutorials"</span>)) &#123;</div><div class="line">                    element.remove(title);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        OutputFormat format = OutputFormat.createPrettyPrint();</div><div class="line">        <span class="comment">// 利用格式化类对编码进行设置</span></div><div class="line">        format.setEncoding(<span class="string">"GBK"</span>);</div><div class="line">        FileOutputStream output = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(path +</div><div class="line">                <span class="string">"xml/books1.xml"</span>));</div><div class="line">        XMLWriter writer = <span class="keyword">new</span> XMLWriter(output, format);</div><div class="line">        writer.write(doc);</div><div class="line">        writer.flush();</div><div class="line">        writer.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>XML内容如下</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--This is a test for dom4j, tbwang, 2017/1/9--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">show</span>=<span class="string">"yes"</span> <span class="attr">url</span>=<span class="string">"lucene.net"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span> <span class="attr">id</span>=<span class="string">"456"</span>&gt;</span>Lucene 学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">show</span>=<span class="string">"yes"</span> <span class="attr">url</span>=<span class="string">"dom4j.com"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span> <span class="attr">id</span>=<span class="string">"123"</span>&gt;</span>Dom4j Tutorials<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">show</span>=<span class="string">"no"</span> <span class="attr">url</span>=<span class="string">"spring.org"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span> <span class="attr">id</span>=<span class="string">"789"</span>&gt;</span>Spring in Action<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">owner</span>&gt;</span>O'Reilly<span class="tag">&lt;/<span class="name">owner</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>编辑文件时出现下面的错误</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Exception in thread <span class="string">"main"</span> java.lang.NoClassDefFoundError: org/jaxen/JaxenException</div><div class="line">    at org.dom4j.DocumentFactory.createXPath(DocumentFactory.java:<span class="number">230</span>)</div><div class="line">    at org.dom4j.tree.AbstractNode.createXPath(AbstractNode.java:<span class="number">207</span>)</div><div class="line">    at org.dom4j.tree.AbstractNode.selectNodes(AbstractNode.java:<span class="number">164</span>)</div><div class="line">    at com.XmlTest3.main(XmlTest3.java:<span class="number">39</span>)</div><div class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</div><div class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</div><div class="line">    at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</div><div class="line">    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:<span class="number">147</span>)</div><div class="line">Caused by: java.lang.ClassNotFoundException: org.jaxen.JaxenException</div><div class="line">    at java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="number">381</span>)</div><div class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">424</span>)</div><div class="line">    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class="number">331</span>)</div><div class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">357</span>)</div><div class="line">    ... <span class="number">9</span> more</div></pre></td></tr></table></figure>
<p><strong>原因是</strong>没有引入<code>jaxen-1.1-beta-6.jar</code>这个包，网上下载一个导入即可。<a href="http://download.csdn.net/download/zhaodandan19910306/4022756" target="_blank" rel="external">jaxen-1.1-beta-6.jar</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[XML基础知识]]></title>
      <url>tbwang.win/XML%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0.html</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="什么是XML语言？"><a href="#什么是XML语言？" class="headerlink" title="什么是XML语言？"></a>什么是XML语言？</h3></blockquote>
<p>XML时可扩展标记语言(Extensible Markup Language),它和Html类似，是一种标记语言，主要用来传输和结构化存储数据。</p>
<a id="more"></a>
<blockquote>
<h3 id="XML和HTML的区别"><a href="#XML和HTML的区别" class="headerlink" title="XML和HTML的区别"></a>XML和HTML的区别</h3></blockquote>
<p>它不是HTML的替代，二者的设计目的不同。XML主要用来传输和存储数据，其焦点是数据的内容，HTML则是设计用来显示数据，焦点是数据的外观。HTML旨在显示数据，XML则旨在传输数据。</p>
<blockquote>
<h3 id="XML的特点"><a href="#XML的特点" class="headerlink" title="XML的特点"></a>XML的特点</h3></blockquote>
<ul>
<li>XML是个纯文本，有能力处理纯文本的软件都可以处理XML文件。</li>
<li>XML没有预定义的标签，你可以自己定义自己的标签和自己的文档结构，比如<wang>….</wang>,这一点与HTML是不同的。</li>
<li>XML是独立于软件和硬件的信息传输工具，是目前各种应用程序中进行数据传输的最常用的工具，并且在信息存储和描述领域变得越来越流行。它可以简化数据传输、简化平台变更、是你的数据更加有用。</li>
</ul>
<blockquote>
<h3 id="XML基本语法规则"><a href="#XML基本语法规则" class="headerlink" title="XML基本语法规则"></a>XML基本语法规则</h3></blockquote>
<ol>
<li>所有的XML都要有关闭标签。<code>注：声明不属于XML本身的组成部分。它不是 XML 元素，也不需要关闭标签。</code></li>
<li>XML标签对大小写敏感，必须使用相同的大小写来编辑打开、关闭标签。</li>
<li>XML文档必须有根目录，作为其他所有元素的父元素</li>
<li>XML的属性值必须加引号,下面的date不加引号是错的。<br> <code>&lt;note date=08/08/2008&gt;</code><br> <code>&lt;to&gt;George&lt;/to&gt;</code><br> <code>&lt;from&gt;John&lt;/from&gt;</code><br> <code>&lt;/note&gt;</code></li>
<li>XML的注释的写法 <code>&lt;!--This is a comment--&gt;</code></li>
<li>XML中的空格会被保留，HTML中的多个空格会被合并成一个，XML不会</li>
<li>如果属性值本身包含双引号，那么有必要使用单引号包围它，就像这个例子：<br><code>&lt;gangster name=&#39;George &quot;Shotgun&quot; Ziegler&#39;&gt;</code><br>或者可以使用实体引用：<br><code>&lt;gangster name=&quot;George &amp;quot;Shotgun&amp;quot; Ziegler&quot;&gt;</code></li>
<li>实体引用 <em>这部分要重点说一下</em>，在XML中，一些字符拥有特殊的意义，如果你把字符“&lt;”放在xml元素中，就会发生错误，因为解析器会把它们当作新的开始进行解析，比如下面的写法就是错误的。<br><code>&lt;message&gt; if salary &lt; 10000 then &lt;/message&gt;</code><br>为了避免这个错误，请使用实体引用来代替“&lt;”字符<br><code>&lt;message&gt;if salary &amp;lt; 1000 then&lt;/message&gt;</code><br>在XML中，有5个预定义的实体饮用</li>
</ol>
<table>
<thead>
<tr>
<th><code>&amp;lt;</code></th>
<th>&lt;</th>
<th>小于</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;gt;</code></td>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td><code>&amp;amp;</code></td>
<td>&amp;</td>
<td>和号</td>
</tr>
<tr>
<td><code>&amp;apos;</code></td>
<td>‘</td>
<td>单引号</td>
</tr>
<tr>
<td><code>&amp;quot;</code></td>
<td>“</td>
<td>引号</td>
</tr>
</tbody>
</table>
<blockquote>
<h3 id="什么是XML元素？"><a href="#什么是XML元素？" class="headerlink" title="什么是XML元素？"></a>什么是XML元素？</h3></blockquote>
<p>XML元素指的是从(且包括)开始标签到结束标签的部分，元素可以包含其他元素、文本、或者二者的混合物。元素可以拥有属性</p>
<blockquote>
<h3 id="XML命名规则"><a href="#XML命名规则" class="headerlink" title="XML命名规则"></a>XML命名规则</h3></blockquote>
<p>XML 元素必须遵循以下命名规则：</p>
<ul>
<li>名称可以含字母、数字以及其他的字符</li>
<li>名称不能以数字或者标点符号开始</li>
<li>名称不能以字符 “xml”（或者 XML、Xml）开始</li>
<li>名称不能包含空格</li>
<li>可使用任何名称，没有保留的字词。</li>
</ul>
<blockquote>
<h3 id="CDATA"><a href="#CDATA" class="headerlink" title="CDATA"></a>CDATA</h3></blockquote>
<p>术语 CDATA 指的是不应由 XML 解析器进行解析的文本数据（Unparsed Character Data）。<br>在 XML 元素中，”&lt;” 和 “&amp;” 是非法的。<br>“&lt;” 会产生错误，因为解析器会把该字符解释为新元素的开始。<br>“&amp;” 也会产生错误，因为解析器会把该字符解释为字符实体的开始。<br>某些文本，比如 JavaScript 代码，包含大量 “&lt;” 或 “&amp;” 字符。为了避免错误，可以将脚本代码定义为 CDATA。<br>CDATA 部分中的所有内容都会被解析器忽略。<br>CDATA 部分由 “&lt;![CDATA[“ 开始，由 “]]&gt;” 结束：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">&lt;![CDATA[</div><div class="line">function matchwo(a,b)</div><div class="line">&#123;</div><div class="line">if (a &lt; b &amp;&amp; a &lt; 0) then</div><div class="line">  &#123;</div><div class="line">  return 1;</div><div class="line">  &#125;</div><div class="line">else</div><div class="line">  &#123;</div><div class="line">  return 0;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">]]&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在上面的例子中，解析器会忽略 CDATA 部分中的所有内容。<br>关于 CDATA 部分的注释：<br>CDATA 部分不能包含字符串 “]]&gt;”。也不允许嵌套的 CDATA 部分。<br>标记 CDATA 部分结尾的 “]]&gt;” 不能包含空格或折行。</p>
<blockquote>
<h3 id="XML-DTD"><a href="#XML-DTD" class="headerlink" title="XML DTD"></a>XML DTD</h3></blockquote>
<p>DTD 的作用是定义 XML 文档的结构。它使用一系列合法的元素来定义文档结构：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE note [</span></div><div class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</div><div class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</div><div class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</div><div class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</div><div class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</div><div class="line">]&gt;</div></pre></td></tr></table></figure></p>
<p><a href="http://www.w3school.com.cn/xml/xml_validator.asp" target="_blank" rel="external">XML语法验证</a></p>
<blockquote>
<p>XML和CSS结合使用</p>
</blockquote>
<p>这个不是推荐的写法，如果要用可以参考<a href="http://www.w3school.com.cn/xml/xml_display.asp" target="_blank" rel="external">W3School教程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用命令]]></title>
      <url>tbwang.win/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3></blockquote>
<p><strong>按规则查找某个文件或文件夹，包括子目录,这里的<code>*</code>表示0个或多个占位符，<code>?</code>表示一个占位符</strong></p>
<ul>
<li><code>find . -name &#39;*.sh&#39;</code> – 以.sh结尾的文件</li>
<li><code>find . -name &#39;*channel*&#39;</code> – 包含channel字符的文件</li>
<li><code>find . -name &#39;build*&#39;</code>– 以build开头的文件</li>
<li><code>find . -name &#39;abc??&#39;</code>– abc后面有两个字符的文件</li>
</ul>
<a id="more"></a>
<blockquote>
<h3 id="grep-Global-Regular-Expression-Print"><a href="#grep-Global-Regular-Expression-Print" class="headerlink" title="grep (Global Regular Expression Print)"></a>grep (Global Regular Expression Print)</h3></blockquote>
<p><strong>查找内容包含指定的范本样式的文件</strong></p>
<ul>
<li><code>grep -n pattern files</code>  – 规则 -n表示显示行号</li>
<li><code>grep -n &#39;tbwang.win&#39; robots.txt</code> 查找该目录下的robots.txt文件中的关键词<code>tbwang.win</code>所在的行信息，关键词上的单引号可加可不加,注意子目录文件中的信息不会被检索</li>
<li><code>grep -i pattern files</code>：不区分大小写地搜索。默认情况区分大小写  </li>
<li><code>grep -w pattern files</code>：只匹配整个单词，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’） </li>
<li><code>grep -C number pattern files</code> ：匹配的上下文分别显示[number]行</li>
<li><code>grep pattern1 | pattern2 files</code>：显示匹配 pattern1 或 pattern2 的行</li>
<li><code>grep pattern1 files | grep pattern2</code>：显示既匹配 pattern1 又匹配 pattern2 的行。 </li>
</ul>
<p><strong> grep命令经常和其他命令一起使用 </strong></p>
<ul>
<li><code>ls -l | grep source</code> —找到当前目录下叫<code>source</code>的文件夹或文件</li>
<li><code>ps -ef | grep custCenter</code> —查找当前叫<code>custCenter</code>的进程名,杀进程的时候会使用到</li>
</ul>
<blockquote>
<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3></blockquote>
<p><strong>tail [-f] [-c Number | -n Number | -m Number | -b Number | -k Number] [File]</strong><br><strong>从指定点开始将文件写到标准输出。使用tail命令的-f选项可以方便的查阅正在改变的日志文件，tail -f filename会把filename里最尾部的内容显示在屏幕上，并且不断刷新，使你看到最新的文件内容。</strong></p>
<ul>
<li><code>tail -f test.log</code> —循环查看文件内容，Ctrl＋c来终止</li>
<li><code>tail -n 5 test.log</code> —显示文件最后5行内容</li>
<li><code>tail -n +5 test.log</code>—从第5行开始显示文件</li>
</ul>
<blockquote>
<h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3></blockquote>
<p><strong>more [-dlfpcsu] [-num] [+/ pattern] [+linenum] [file…]</strong><br><strong>more命令和cat的功能一样都是查看文件里的内容，但有所不同的是more可以按页来查看文件的内容，还支持直接跳转行等功能。</strong></p>
<ul>
<li><code>more +3 test.log</code> —显示文件中从第3行起的内容</li>
<li><code>more -5 test.log</code> —设定每屏显示行数</li>
<li><code>ls -l | more -5</code> —每页显示5个文件信息</li>
<li><code>more +/day3 test.log</code> —查找第一个出现”day3”字符串的行，并从该处前两行开始显示输出</li>
</ul>
<blockquote>
<h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3></blockquote>
<p><strong>less [options] [file…]</strong><br><strong>与more命令一样，less命令也用来分屏显示文件的内容。但是二者存在差别：less命令允许用户向前或向后浏览文件，而more命令只能向前浏览。用less命令显示文件时，用PageUp键向上翻页，用PageDown键向下翻页。要退出less程序，应按Q键。</strong></p>
<ul>
<li><code>less test.log</code> —查看文件</li>
<li><code>ps -ef | less</code> —查看进程信息并通过less分页显示</li>
<li><code>history | less</code> —查看命令历史使用记录并通过less分页显示</li>
<li><code>less test1.log test2.log</code> —浏览多个文件，n和p切换文件</li>
</ul>
<blockquote>
<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3></blockquote>
<p><strong>主要用来监控系统信息变化，每隔一段时间重复运行一个命令，默认间隔时间是2秒。要运行的命令直接传给shell（注意引用和转义特殊字符）。结果会展示为全屏模式，这样你可以很方便的观察改变</strong></p>
<ul>
<li><code>watch -n 60 date</code> —执行date命令每分钟一次，输入^C 退出</li>
<li><code>watch -d ls -l</code> —查看目录变化</li>
<li><code>watch -d ’ls -l | fgrep joe’</code> —想找joe用户的文件</li>
<li><code>watch -d &#39;ls -l|grep scf&#39;</code> —监测当前目录中 scf’ 的文件的变化</li>
<li><code>watch -n 10 &#39;cat /proc/loadavg&#39;</code> —10秒一次输出系统的平均负载</li>
<li><code>watch -n 1 -d netstat -ant</code> —每隔一秒高亮显示网络链接数的变化</li>
<li><code>watch -n 1 -d &#39;pstree | grep http&#39;</code> —每隔一秒高亮显示http链接数的变化<pre><code>注：Mac系统下终端没有watch命令
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个java高级工程师的进阶之路]]></title>
      <url>tbwang.win/%E4%B8%80%E4%B8%AAjava%E9%AB%98%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF.html</url>
      <content type="html"><![CDATA[<h3 id="宏观方面"><a href="#宏观方面" class="headerlink" title="宏观方面"></a>宏观方面</h3><blockquote>
<p>JAVA</p>
</blockquote>
<p>要想成为JAVA（高级）工程师肯定要学习JAVA。一般的程序员或许只需知道一些JAVA的语法结构就可以应付了。但要成为JAVA（高级）工程师，您要对JAVA做比较深入的研究。您应该多研究一下JDBC、IO包、Util包、Text包、JMS、EJB、RMI、线程。如果可能，希望您对JAVA的所有包都浏览一下，知道大概的API，这样您就发现其实您想实现的很多功能，通过JAVA的API都可以实现了，就不必自己费太多的脑经了。 </p>
<a id="more"></a>
<blockquote>
<p>设计模式</p>
</blockquote>
<p>其实写代码是很容易的事情，我相信您也有同感。但如何写得好就比较难了。这个“好”字包括代码可重用性，可维护性，可扩展性等。如何写出好的代码往往要借助一些设计模式。当然长期的代码经验积累，只要您用心，会使您形成自己代码风格。相信您的代码也比较符合代码的可重用性，可维护性，可扩展性。但既然前人已经给我们总结出了经验，我们何不踩着前人的肩膀前进？ </p>
<blockquote>
<p>XML</p>
</blockquote>
<p>现在的系统中不使用XML几乎是不可能的。XML的功能非常强大，它可以做数据转换、做系统的配置、甚至可保存您的系统业务数据。因此您必须了解XML，包括它的语法，结构。您还需要比较熟练的使用解析XML的一些API，比如JDOM，SAX等，因为在我们一般的项目中，XML往往担当系统配置信息的作用，您需要用这些API解析这些配置信息，开发完美的项目。 </p>
<blockquote>
<p>精通使用一种或两种框架</p>
</blockquote>
<p>像在《如何成为java初级程序员》中提到的那样，“框架都会有许多可重用的代码，良好的层次关系和业务控制逻辑，基于框架的开发使你可以省出很多的开发成本”。但我这里希望您能精通，更多的是希望您能通过框架的使用了解框架的思想。这样您在开发一个项目时思路会开阔一些，比如您会想到把SQL语句与您的JAVA代码分开，再比如您会考虑把您的业务逻辑配置到XML或者数据库中，这样整个项目就很容易扩张了。 </p>
<blockquote>
<p>熟悉主流数据库。</p>
</blockquote>
<p>其实真正比较大的项目都是有人专门做数据库的，但往往很多项目要求作为（高级）工程师的您也参与数据库的设计以及SQL的编写。所以为了更好的为国家做贡献，建议您还是多了解一些主流数据库，比如SQLSERVER，ORACLE，多连接SQL和存储过程以及触发器。如果您不是“科班”出身，您还需要补充一些数据库原理方面的知识。 </p>
<blockquote>
<p>精通一种或两种WEBServer。</p>
</blockquote>
<p>尽管我在《如何成为java初级程序员》里讲过它，我还是要强调您要精通一种或两种。因为作为JAVA工程师，特别时想成为高级JAVA工程师的您，您不可避免地要部署您的项目到WebServer上，而且只有当您精通一种WebServer，您才可能最大限度地使用它的资源，这往往可以节省很多时间和精力。 </p>
<blockquote>
<p>UML</p>
</blockquote>
<p>我知道您肯定想成为高级工程师，因此您有必要了解或熟练或精通UML，这取决于您有多大决心想成为高级工程师和项目经理。在比较正规的开发团队中，UML是讨论项目的交流工具，您要想做一个软件工程师，您至少要能看懂，您要想做高级工程师，您要能通过它来描述您对项目的理解，尽管这不是必须，但却很重要。 </p>
<blockquote>
<p>站在高度分析问题</p>
</blockquote>
<p>这不是一个知识点，也不是通过书本就能学得到的。只所以提到这一点，是因为我比您还着急，我希望您更快的成为一个高级的软件工程师，而不是一个一般的软件工程师。希望您在工作中多向您的系统分析员、需求分析员、系统设计员学习，多站在他们角度上去看您在开发的项目。在最好在项目之初先在您的脑海里对项目有个大致的分析、设计，然后和他们进行比较，找找差别，想想缺点。 </p>
<blockquote>
<p>IDE工具。</p>
</blockquote>
<p>与在《如何成为java初级程序员》里提到的不同，您在这个阶段可能接触到不同的工具了，尽管您还需要使用JB或者IDEA，但能可能对ROSE，Together要多了解一些，因为您要画UML了。不要再对Dreamweaver等HTML编辑器情有独钟了，那些JSP页面让初级程序员去写吧</p>
<h3 id="微观方面"><a href="#微观方面" class="headerlink" title="微观方面"></a>微观方面</h3><blockquote>
<p>Core Java部分</p>
</blockquote>
<p>这是最基础的,对于一个java高级开发/设计人员,你需要对这一部分达到精通的水平,重点内容如下:</p>
<ul>
<li>面向对象编程思想(封装继承多态接口)</li>
<li>字符串处理</li>
<li>java.lang包,java.util包等常用包</li>
<li>java异常处理</li>
</ul>
<blockquote>
<p>Java高级部分</p>
</blockquote>
<ul>
<li>Java I/O流</li>
<li>Java多线程技术</li>
<li>Java网络编程</li>
<li>Java Swing<br>后两项可以了解即可,如果项目需要可以深入研究</li>
</ul>
<blockquote>
<p>前端基本技能</p>
</blockquote>
<ul>
<li>HTML + CSS网页开发</li>
<li>JavaScript</li>
<li>Jquery</li>
<li>浏览器兼容性 CSS hack(了解)</li>
<li>熟练使用JSP + Servlet进行开发</li>
<li>MVC设计模式,原理,以及相关框架,如Struts</li>
<li>SSH框架</li>
<li>缓存技术 session &amp; cookie</li>
<li>熟练使用一种以上Java开发工具                  （Eclipse/MyEclipse/Jbuilder/Jcreator/IntelliJIEDA/NetBeans）</li>
<li>熟练使用XML<pre><code>JDOM w3c.dom SAX
</code></pre></li>
<li>Java设计模式<pre><code>工厂模式,单例模式 ==
</code></pre></li>
<li>Java反射机制<pre><code>反射的各种用法
</code></pre></li>
<li>了解或熟悉 C, C++, .NET</li>
<li>熟悉JDK的配置,环境变量</li>
<li>数据库oracle必学,其他最好了解一种以上(mysql,sql server,access==)<pre><code>oracle:视图,索引,存储过程,触发器,游标,包,常用函数 ==
</code></pre></li>
<li>数据库原理<pre><code>事务的原理,锁机制,表连接,复杂查询语句(工作经验),性能调优,锁表以及解决方案==
</code></pre></li>
<li>JDBC,连接池</li>
<li>Ajax,反向Ajax</li>
<li>HTTP协议,request 和 response的原理,HTTP status(了解常用* Https原理</li>
<li>熟悉Linux基本命令,使用过Linux/Unix系统,可以编写shell脚本,可以在Linux上部署项目</li>
<li>了解windows系统批处理脚本bat</li>
<li>了解HTML5,最好学习过</li>
<li>熟悉一种JS框架,如Prototype</li>
<li>J2EE原理 熟悉一种以上web容器如      <pre><code>Tomcat,JBoss,websphere,weblogic==
</code></pre></li>
<li>熟悉ant或maven</li>
<li>熟悉一门脚本语言,如python ,ruby</li>
<li>了解php/ asp</li>
<li>了解ftp协议及原理</li>
<li>熟练使用Junit测试,熟悉Mockito等测试工具</li>
<li>熟悉javac,javadoc,native,native2ascii等常用命令</li>
<li>熟悉常用的排序算法,如冒泡排序,快速排序等,最好自己研究过一些的算法。</li>
<li>了解Flex(不学也没关系)</li>
<li>了解敏捷开发模式</li>
<li>工作流workflow至少用过一种,如OSworkflow,了解原理</li>
<li>使用过VPN了解其原理</li>
<li>熟悉jstl表达式和el表达式</li>
<li>熟悉webservice,WSDL,SOAP</li>
<li>图片处理,如图片上传,预览,限制大小等</li>
<li>版本控制工具,CVS VSS SVN</li>
<li>JSON技术,JSON+AJAX</li>
<li>分页技术,最好自己实现过不仅仅是用过要知道原理</li>
<li>Java Mail</li>
<li>Java读写txt,excel,JXL技术</li>
<li>JVM原理,JVM内存管理,GC,Java堆栈池</li>
<li>熟练使用下面的工具:<pre><code>office办公软件,word,excel,ppt等
plsql,sqldevelop 数据库开发工具
outlook大公司都用
ue编辑器
浏览器控制台,调试
SHH/PUTTY 远程
</code></pre></li>
<li>UML建模工具Rational Rose等</li>
<li>使用log4j</li>
<li>使用过开放Api如百度，腾讯街景，新浪微博等</li>
<li>页面静态化技术（伪静态页面）</li>
<li>报表技术，使用过报表制作工具，如水晶易表。</li>
<li>定时任务，如Spring batch ,学会自定义batch任务（不适用第三方工具）</li>
<li>了解uuid</li>
<li>b/s 和 c/s架构</li>
<li>正则表达式</li>
<li>了解jndi jms</li>
<li>ERP</li>
<li>UNICODE编码，乱码解决</li>
<li>开源网络编辑器，如ckEditor</li>
<li>二进制原理</li>
<li>使用过，了解过开源论坛框架，如discuzz</li>
<li>GWT，Closure框架</li>
<li>了解大数据，云计算</li>
<li>搜索引擎搜索技术</li>
<li>软件工程，项目管理</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[写在2017]]></title>
      <url>tbwang.win/%E5%86%99%E5%9C%A82017.html</url>
      <content type="html"><![CDATA[<p id="div-border-left-red">2016年转眼即过，在这一年经历了太多的事情。买房、学车、结婚、买车、辞职、重新找工作</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今晚就好好整理下这一年来做的事情，留作以后记忆。</p>
<p></p><p id="div-border-left-red">买房</p><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生在中国，永远避免不了买房子的事情。还记得在之前在苏州的时候，租住的小区房价才一万出头，转眼间仅仅不到一年的时间，房价便扶摇直上两万五。有时候感觉辛辛苦苦赚的钱在房价面前屁都不是。有可能你一年奋斗的钱都不够一个政策带来的几天的收益。<br>来到南京后，因为认识了我媳妇决定在南京定居。不可避免的买房也逐渐提上日程。南京的房价一直以来都居高不下，3月初去看房子的时候那时候房子还不是太火爆，销售的态度还是不错的，积极的围绕你跑前跑后，仅仅过了一周，再去看时原来看中的房子都已经卖出大半了。此时的市场已经彻底是卖方市场了，赶紧确定下了户型然后交了定金。这一周的时间让我多花了5万块钱。房老虎果然名不虚传啊！可能今后要住几十年的房子在几十分钟里就被我确定了下来，后来的涨势📈也让我感到了庆幸，虽然说比原来多花了几万，但是接下来如果不买的话还要多花不啥钱。哎，房子这东西还是早买早安心，剩下的不管是涨还是跌就暂时先不管了，不过说实话就南京而言，房子想要降价真的是太难。<br><a id="more"></a><p></p>
<p></p><p id="div-border-left-red">学车</p><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学车这件事情真的是我高考以来我遇到的最痛苦的一场考试。<br>我在一月份报名学车，科目一没费多少工作二月份过完年看了几小时书就靠过去了，接下来就到了恶心的科目二了。3月份开始学习科目二，驾校分配的科目二教练是一个脸晒的黑黑的、整天板着一张脸的四十多岁的教练，名字就不暴露了。一上车简单的叫了下简单的方向盘、油门、离合的技巧，剩下的自己去学了。我因为工作日要上班，所以只能星期六过来一次，开始时因为觉得时间不着急，偶尔一个月才来学习一次。后续的3个月都没有好好的学习，断断续续去过三四次，这段时间也怪自己太懒散了，因为学车需要提前一天八点钟之前和教练预约，有时候周五起的晚了忘记预约活着预约迟了点，周六就去不了了。时间拖到了6月份，这个月去的次数多了一点，一个月每周去一次，但是这期间只是在简单练习了下倒车出库，可惜每次练的都不是很好，老是容易压到线。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;转眼就到了7月下旬，一直到现在还是在练习倒车入库，去驾校也是想起来就去，想不起来或者是预约失败就索性不去了。天气也逐渐热了起来，心情也越发烦躁，这时候真的有段时间对练车失去了信息，甚至于一度不想去想学车的问题，不想去驾校。这种鸵鸟心态有一段时间占据我的内心。按理说以我的智商练习这个不应该有太多问题。这期间教练态度也不太好。我分析了下原因：<strong>1</strong>我是男的 <strong>2</strong> 我没有送礼<strong>3</strong> 我学的确实有点问题。分析好了原因后，心想不能再继续拖了，因为我计划于九月份结婚换工作，如果驾照一直都拿不到手，那接下来就会特别麻烦。真对以上原因那么就必须采取策略了 。一：送礼 二：每天学车前、学车后都花一点时间好好想想开车的技巧。送礼的事情没什么多说的，这种潜规则每个学车人都会多多少少碰到过，我找到教练，让他每天早上7点多来到驾校第一个教我练车(驾校8点上班)，我早上8点半练完车后就可以直接跑回公司上班去。每周最起码可以学习6次车，这样子一周学车的次数最起码相当于我过去两个月的次数。说实话有钱能使鬼推磨，送完礼之后教练的态度好多了，第二天就带我练起了小四项，就这样练了两周，基本上科目二的所有项目我都练的差不多了，也终于对自己学车自信多了，从这里我的基本感悟就是人任何时候都不能对自己丧失信心，只要努力去做，找到合适的方法，看似很困难的事情其实也没什么。每天早上我在去驾校学车的路上都要好好想想上一次学车总结到的技巧以及自己犯下的错误，学完车以后再继续总结下，两周之后感觉学的差不多了就赶紧预约了8月份的考试，考试前的模拟出了点小插曲，小四项模拟了6把，全国。倒车入库这个我学的最多的一项3把模拟全挂，可能是当时太紧张了。那天回去后都已经夜里面11点了，后来想了想安慰自己心放宽点，就洗洗睡了。第二天考试一把过，说实话当时的心情真的是开心极了，要不是门口看守入口的入口是个男的，我都想抱他一下了。那天真的是特别开心，赶紧给我媳妇、我妈打了个电话，科目二考过了，终于看到了9月份拿到驾照的曙光了哈哈哈哈。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来科目三就简单多了，是我老乡教的我，练了四五次之后就预约了科目三的考试，说实话有过科目二的影响，当时抱着考不过的心情去考试的，科目四都没看一眼，结果上午的考试很轻松就考过了，我们一车10个人，我排在倒数第二，挂了3个人。考完科三，突然意识到下午还得考科四，因为之前没想到自己的科三能过，科四也就没怎么看，但是看了下科四的模拟题，感觉跟科一差不了多少，中午花了几十分钟简单看了下下午就去考试了，92分，虽然不是很高但是过了就行。终于抢在了九月初拿到了驾照。回想这半年来的学车经历真的是印象深刻、感慨良多。说实话买房子虽然是大事，但是我从看到买也没多少感觉，就一个下手要快。学车这件事真的是教会了我很多道理。<p></p>
<pre><code>有些事情看似很难，看似完成不了，其实还是你有些方面没有做到位。仔细回想下造成你现在困境的原因，好好静下心总结下，你总会找到方法去解决问题的。
做一件事情一定要保持恒心，吊儿郎当，三天打鱼两天晒网是不可能有什么成绩的。
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FileZila使用方法]]></title>
      <url>tbwang.win/FileZilla-Doc.html</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/3949443-15672782d00886af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><a id="more"></a></p>
<h3 id="Mac系统下如何获取linux服务器文件"><a href="#Mac系统下如何获取linux服务器文件" class="headerlink" title="Mac系统下如何获取linux服务器文件"></a>Mac系统下如何获取linux服务器文件</h3><p> Mac系统下我们出了通过终端命令行来获取Linux服务器文件之外，还可以通过<a href="https://filezilla-project.org" target="_blank" rel="external">FileZilla</a>这款软件来直观的选择所需的文件并且下载到本地。</p>
<blockquote>
<p>FileZilla 连接Linux服务器配置信息，有两种方式</p>
</blockquote>
<p>方法一<br><img src="http://upload-images.jianshu.io/upload_images/3949443-7c090c5873cbd8fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置方法一"></p>
<p>方法二<br><img src="http://upload-images.jianshu.io/upload_images/3949443-b1acf9d174b4a380.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置方法二"></p>
<blockquote>
<p>下载所需的文件，点击左侧位置去选择下载保存到本机的地址，右侧直接双击所需文件下载就行</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/3949443-2395018e4e0a5249.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载所需文件"></p>
<p>FileZiila其他用法暂时未涉及，后续再增加…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown使用方法]]></title>
      <url>tbwang.win/Markdown%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html</url>
      <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><blockquote>
<p><a href="http://baike.baidu.com/link?url=W4NFVG2OdlAhRWBFUt8tAFAELA7d7NvaTvi5pJGLmT7c3El2StkWyX2iA9qSjjcOGIClZ85NhdYzBXfKAkIwmAHDy0hct6Cu5xlbMScSIxS" target="_blank" rel="external">Markdown</a> 是一种轻量级的<strong>「标记语言」</strong>，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被<strong>「标记」</strong>、<strong>「语言」</strong>所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。 </p>
</blockquote>
<a id="more"></a>
<p>在刚才的导语里提到，Markdown 是一种用来写作的轻量级<strong>「标记语言」</strong>，它用简洁的语法代替排版，而不像一般我们用的字处理软件 <em>Word</em> 或 <em>Pages</em> 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。目前来看，支持 Markdown 语法的编辑器有很多，包括很多网站（例如<a href="http://jianshu.io" target="_blank" rel="external">简书</a>）也支持了 Markdown 的文字录入。Markdown 从写作到完成，导出格式随心所欲，你可以导出 HTML 格式的文件用来网站发布，也可以十分方便的导出 PDF 格式，这种格式写出的简历更能得到 HR 的好感。甚至可以利用 <a href="http://www.getcloudapp.com" target="_blank" rel="external">CloudApp</a> 这种云服务工具直接上传至网页用来分享你的文章。</p>
<blockquote>
<p>常用的编辑工具</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/3949443-b30f952c2ff174f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>常用的web编辑器，我选择<a href="http://www.jianshu.com/writer" target="_blank" rel="external">简书在线编辑</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3949443-fb18b3b187507188.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Markdown-语法的简要规则"><a href="#Markdown-语法的简要规则" class="headerlink" title="Markdown 语法的简要规则"></a>Markdown 语法的简要规则</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p><img src="http://upload-images.jianshu.io/upload_images/3949443-78eb6446aea3b21a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标题">标题</p>
<p>标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加#<br>号即可。</p>
<pre><code># 一级标题
## 二级标题
### 三级标题
</code></pre><p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。<br>列表<br>熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上-或*<br>即可变为无序列表，有序列表则直接在文字前加1. 2. 3. ,符号要和文字之间加上一个字符的空格。<br><img src="http://upload-images.jianshu.io/upload_images/3949443-04e93a32a7d6d79f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无序列表与有序列表">无序列表与有序列表</p>
<p>引用<br>如果你需要引用一小段别处的句子，那么就要用引用的格式。<br>例如这样</p>
<p>只需要在文本前加入 &gt; 这种尖括号（大于号）即可<br><img src="http://upload-images.jianshu.io/upload_images/3949443-6b3f885c24fb1808.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="引用">引用</p>
<p>图片与链接<br>插入链接与插入图片的语法很像，区别在一个!号<br>图片为：<code>![](){ImgCap}{/ImgCap}</code><br>链接为：<code>[]()</code></p>
<p>插入图片的地址需要图床，这里推荐<a href="http://weibotuchuang.sinaapp.com" target="_blank" rel="external">围脖图床修复计划</a> 与 <a href="http://www.getcloudapp.com" target="_blank" rel="external">CloudApp</a> 的服务，生成URL地址即可。<br><img src="http://upload-images.jianshu.io/upload_images/3949443-ec9e9cd514238af5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="URL 与图片">URL 与图片</p>
<p>粗体与斜体<br>Markdown 的粗体和斜体也非常简单，用两个 <code>**</code><br>包含一段文本就是粗体的语法，用一个 <code>*</code><br>包含一段文本就是斜体的语法。<br>例如：<strong>这里是粗体</strong> <em>这里是斜体</em> </p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格是我觉得 Markdown 比较累人的地方，例子如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">This</th>
<th style="text-align:center">is</th>
<th style="text-align:center">table</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">asdf</td>
<td style="text-align:center">dsaf</td>
<td style="text-align:center">dsf</td>
</tr>
</tbody>
</table>
<p>表格的语法格式主要用到了 <code>| - :</code><br><code>|</code>主要用来划定列，<code>-</code>用来划分首行与数据，<code>:</code>放在<code>--</code>的前面表示左对齐，后面表示右对齐，两边都有则是中间对齐。</p>
<h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><p>如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来。图例：<br><img src="http://upload-images.jianshu.io/upload_images/3949443-54e86d0eba588bab.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>使用tab键即可缩进。</p>
<pre><code>你好，我是代码框
</code></pre><p>也可以使用顿号来实现<br><code>你好，我也是代码框</code></p>
<p>###分割线<br>分割线的语法只需要三个<code>***</code>号</p>
<hr>
<h2 id="三-相关推荐"><a href="#三-相关推荐" class="headerlink" title="三 相关推荐"></a>三 相关推荐</h2><p><strong>工具</strong><br><em>图床工具用来上传图片获取 URL 地址</em><br><a href="http://droplr.com" target="_blank" rel="external">Droplr</a><br><a href="http://www.getcloudapp.com" target="_blank" rel="external">Cloudapp</a><br><a href="https://itunes.apple.com/cn/app/yi-xiang/id672522335?mt=12&amp;uo=4" target="_blank" rel="external">ezShare for Mac</a><br><a href="http://weibotuchuang.sinaapp.com" target="_blank" rel="external">围脖图床修复计划</a></p>
<p><em>在线好用的Markdown工具，为印象笔记而生</em><br><a href="http://maxiang.info" target="_blank" rel="external">马克飞象，专为印象笔记打造的Markdown编辑器，非常推荐</a></p>
<p>发现一篇博客，可以参考下：<a href="http://blog.junyu.pro/posts/hexo/0006-qa-posts-based-on-markdown.html#align" target="_blank" rel="external">MarkDown使用教程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo使用方法]]></title>
      <url>tbwang.win/Hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/3949443-f897aef7850fccf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><a id="more"></a></p>
<h3 id="Hexo-添加搜索功能"><a href="#Hexo-添加搜索功能" class="headerlink" title="Hexo 添加搜索功能"></a>Hexo 添加搜索功能</h3><blockquote>
<p>打开终端工具进入hexo所在目录，执行下列语句安装插件</p>
</blockquote>
<p><code>1. $ npm install hexo-generator-searchdb --save</code></p>
<blockquote>
<p>在根目录的<strong>_config.yml</strong>文件中添加下列配置</p>
</blockquote>
<pre><code>search:
path: search.xml
field: post
format: html
limit: 10000
</code></pre><blockquote>
<p>3.效果如下</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/3949443-7afee89c35777dac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="Hexo更换主题"><a href="#Hexo更换主题" class="headerlink" title="Hexo更换主题"></a>Hexo更换主题</h3><blockquote>
<p>首先通过终端工具将github上的主题下载到本地</p>
</blockquote>
<pre><code>1. git clone https://github.com/iissnan/hexo-theme-next  themes/next
</code></pre><blockquote>
<p>修改Hexo根目录下的<em>_config.yml</em>文件，将Theme变更为所下载的主题名，比如我们本次下载的主题名为<code>next</code>,那么就改为<code>next</code></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/3949443-162d2e9bbf31e8ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更改所选主题"></p>
<h3 id="关于添加居中模块"><a href="#关于添加居中模块" class="headerlink" title="关于添加居中模块"></a>关于添加居中模块</h3><pre><code>&lt;blockquote class=&quot;blockquote-center&quot;&gt;添加居中模块&lt;/blockquote&gt;
</code></pre><blockquote class="blockquote-center">添加居中模块</blockquote>

<h3 id="关于如何修改内容区域宽度"><a href="#关于如何修改内容区域宽度" class="headerlink" title="关于如何修改内容区域宽度"></a>关于如何修改内容区域宽度</h3><p><code>next</code>对内容的宽度的设定如下：</p>
<blockquote>
<p>00px，当屏幕宽度 &lt; 1600px<br>900px，当屏幕宽度 &gt;= 1600px<br>移动设备下，宽度自适应</p>
</blockquote>
<p> 如果你需要修改内容的宽度，同样需要编辑样式文件。编辑主题的 <code>source\css\_variables\custom.styl</code>文件，修改为</p>
<pre><code>// 修改成你期望的宽度
$content-desktop = 700px
// 当视窗超过 1600px 后的宽度
$content-desktop-large = 900px
</code></pre><h3 id="代码行、代码块样式更改"><a href="#代码行、代码块样式更改" class="headerlink" title="代码行、代码块样式更改"></a>代码行、代码块样式更改</h3><p>以next主题为例，找到<code>next\source\css\components\highlight\highlight.styl</code>文件</p>
<blockquote>
<p>编辑代码行</p>
</blockquote>
<p>找到<code>code {</code>部分，将其中的<code>color</code>和<code>background</code>更改为你想要的样式</p>
<blockquote>
<p>编辑代码块</p>
</blockquote>
<p>找到<code>$code-block {</code>部分的 <code>background</code>更改为你要的颜色，字体的颜色需要找到<code>pre {@extend $code-block;code {</code>部分，将<code>color</code>的颜色更改</p>
<blockquote>
<p>代码语言样式选择</p>
</blockquote>
<p>使用三个单引号 + 所选语言 + 代码内容 + 三个单引号<br>    ``` java<br>       代码详情<br>    ```</p>
<p>下面是示例样式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 这是一段java代码</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Test</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//TODO</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><blockquote>
<p>插件的基本使用命令</p>
</blockquote>
<p>安装插件： <strong>npm install 插件名 –save</strong><br>卸载插件： <strong>npm uninstall 插件名</strong><br>更新插件和博客框架（需要在 E:\git_work_space\hexo 目录下）： <strong>npm update</strong><br>它实质上是通过项目根目录下 package.json 文件更新各大组件</p>
<blockquote>
<p>必备插件</p>
</blockquote>
<p>支持RSS： <strong>npm install hexo-generator-feed –save</strong><br>生成站点地图： <strong>npm install hexo-generator-sitemap –save</strong><br>生成百度站点地图： <strong>npm install hexo-generator-baidu-sitemap –save</strong><br>HTML 压缩： <strong>npm install hexo-html-minifier –save</strong><br>JavaScript 压缩： <strong>npm install hexo-uglify –save</strong><br>CSS 压缩插件： <strong>npm install hexo-clean-css –save</strong><br>SEO优化： <strong>npm install hexo-generator-seo-friendly-sitemap</strong></p>
<h3 id="Hexo使用方法参考-博客链接"><a href="#Hexo使用方法参考-博客链接" class="headerlink" title="Hexo使用方法参考-博客链接"></a>Hexo使用方法参考-博客链接</h3><p><a href="https://neveryu.github.io/2016/09/30/hexo-next-two/#more" target="_blank" rel="external">Hexo-NexT搭建个人博客</a><br><a href="http://blog.junyu.pro/posts/hexo/0010-hexo-learn-from-Never-yu.html" target="_blank" rel="external">Hexo博客设置进阶</a><br><a href="http://www.arao.me/2015/hexo-next-theme-optimize-duoshuo/" target="_blank" rel="external">动动手指，给你的Hexo站点添加最近访客（多说篇）</a><br><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">Hexo你的博客</a></p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于我]]></title>
      <url>tbwang.win/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>tbwang.win/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>tbwang.win/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
